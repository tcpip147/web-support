// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: CssLexer.flex

package com.tcpip147.websupport.css.language;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.tcpip147.websupport.css.language.psi.CssTypes.*;


public class CssLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\10\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\0\1\42"+
    "\32\0\1\43\1\44\1\45\1\0\1\46\1\0\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\46\1\60\1\61\1\62\1\63\1\64\1\65\1\46"+
    "\1\66\1\67\1\70\1\71\2\46\1\72\1\46\1\73"+
    "\1\74\1\75\1\76\1\77\41\0\140\100\u0100\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\1\15\1\16\1\1\1\17\1\1\1\20\2\21\1\22"+
    "\1\1\1\23\1\1\5\0\1\24\1\0\1\25\2\0"+
    "\1\24\4\0\1\12\1\0\1\26\13\0\1\27\6\0"+
    "\3\21\1\0\1\21\1\30\1\31\6\0\1\24\1\0"+
    "\1\25\2\0\1\32\5\0\1\33\3\0\1\34\1\35"+
    "\2\0\1\36\21\0\7\21\1\0\1\21\10\0\2\25"+
    "\1\0\1\37\13\0\1\27\5\0\1\40\23\0\1\41"+
    "\21\0\12\21\12\0\1\25\14\0\1\27\1\0\1\33"+
    "\5\0\1\34\1\35\2\0\1\36\36\0\1\42\13\21"+
    "\3\0\1\43\13\0\1\25\3\0\1\33\3\0\1\40"+
    "\1\0\1\34\1\35\2\0\1\36\30\0\1\44\6\0"+
    "\12\21\17\0\1\25\4\0\1\40\22\0\1\45\13\0"+
    "\1\42\7\21\3\0\1\43\16\0\1\25\3\0\1\46"+
    "\13\0\1\44\2\0\1\42\3\21\1\43\20\0\1\45"+
    "\2\0\1\44\1\0\1\21\13\0\1\47\2\0\1\45"+
    "\23\0\1\47\4\0\1\47\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[516];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\101"+
    "\0\101\0\101\0\u01c7\0\101\0\u0208\0\u0249\0\u028a\0\u02cb"+
    "\0\101\0\101\0\u030c\0\101\0\101\0\u034d\0\101\0\u038e"+
    "\0\101\0\u03cf\0\u0410\0\101\0\u0451\0\101\0\u0492\0\303"+
    "\0\u04d3\0\u0514\0\u0555\0\u0104\0\101\0\u0596\0\u0145\0\u05d7"+
    "\0\u0186\0\u0186\0\u0618\0\u0249\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\101\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\101\0\u0a28\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\101\0\101\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38"+
    "\0\u0104\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\101\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u1040\0\u1081\0\101\0\u10c2\0\u1103\0\u1144\0\101"+
    "\0\101\0\u1185\0\u11c6\0\101\0\u1207\0\u1248\0\u1289\0\u12ca"+
    "\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2"+
    "\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da"+
    "\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2"+
    "\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u1b2b\0\101\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u1f7c\0\101\0\u1fbd\0\u1ffe\0\u203f\0\u2080"+
    "\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288"+
    "\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\101"+
    "\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657"+
    "\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f"+
    "\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67"+
    "\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f"+
    "\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77"+
    "\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f"+
    "\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287"+
    "\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f"+
    "\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697"+
    "\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e\0\u389f"+
    "\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7"+
    "\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\u3bec\0\101\0\u3c2d\0\u3c6e"+
    "\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76"+
    "\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\101\0\u3fbb\0\u3ffc\0\u403d"+
    "\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\u4245"+
    "\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d"+
    "\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655"+
    "\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d"+
    "\0\u489e\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u4a65"+
    "\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\101"+
    "\0\u4c6d\0\u4cae\0\u4cef\0\u4d30\0\u4d71\0\u4db2\0\u4df3\0\u4e34"+
    "\0\u4e75\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u4fba\0\u4ffb\0\u503c"+
    "\0\u507d\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203\0\u5244"+
    "\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b\0\u544c"+
    "\0\u548d\0\u54ce\0\u550f\0\u5550\0\u5591\0\u55d2\0\u5613\0\u5654"+
    "\0\u5695\0\u56d6\0\u5717\0\u5758\0\u5799\0\u57da\0\u581b\0\u585c"+
    "\0\u589d\0\u58de\0\u591f\0\u5960\0\u59a1\0\u59e2\0\u5a23\0\101"+
    "\0\u5a64\0\u5aa5\0\u5ae6\0\u5b27\0\u5b68\0\u5ba9\0\u5bea\0\u5c2b"+
    "\0\u5c6c\0\u5cad\0\u5cee\0\u5d2f\0\u5d70\0\u5db1\0\u5df2\0\u5e33"+
    "\0\u5e74\0\u5eb5\0\u5ef6\0\u5f37\0\u5f78\0\u5fb9\0\u3f7a\0\u5ffa"+
    "\0\u603b\0\u607c\0\u60bd\0\u60fe\0\u613f\0\u6180\0\u61c1\0\u6202"+
    "\0\u6243\0\u6284\0\u62c5\0\u6306\0\u6347\0\u6388\0\u63c9\0\u640a"+
    "\0\u644b\0\101\0\u648c\0\u64cd\0\u650e\0\u654f\0\u6590\0\u65d1"+
    "\0\u6612\0\u6653\0\u6694\0\u66d5\0\u6716\0\u6757\0\u6798\0\u67d9"+
    "\0\u681a\0\u685b\0\u689c\0\u68dd\0\u3f39\0\u691e\0\u695f\0\u69a0"+
    "\0\u69e1\0\u6a22\0\u6a63\0\u6aa4\0\u6ae5\0\u6b26\0\u6b67\0\u6ba8"+
    "\0\u6be9\0\u6c2a\0\u6c6b\0\u6cac\0\u6ced\0\u6d2e\0\u6d6f\0\u6db0"+
    "\0\u6df1\0\u6e32\0\u6e73\0\u6eb4\0\u6ef5\0\u6f36\0\u6f77\0\u6fb8"+
    "\0\u6ff9\0\u703a\0\u707b\0\u70bc\0\u70fd\0\u713e\0\101\0\u717f"+
    "\0\u71c0\0\u7201\0\u7242\0\u7283\0\u72c4\0\u7305\0\u7346\0\u7387"+
    "\0\u73c8\0\u7409\0\u744a\0\u748b\0\u74cc\0\u750d\0\u754e\0\u758f"+
    "\0\u75d0\0\u7611\0\u7652\0\u7693\0\u76d4\0\u7715\0\u7756\0\u7797"+
    "\0\u77d8\0\u7819\0\u785a\0\u789b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[516];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\2\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\12\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\23\32\1\33\2\32\1\34\1\35\1\36\1\37"+
    "\1\32\102\0\4\3\75\0\4\40\15\0\1\41\21\0"+
    "\1\42\12\0\1\43\21\0\2\44\3\0\1\44\1\45"+
    "\35\44\1\46\34\44\20\0\1\47\2\0\12\47\7\0"+
    "\1\50\1\0\26\47\4\0\1\47\2\51\3\0\1\51"+
    "\1\0\3\51\1\52\31\51\1\53\34\51\21\0\1\54"+
    "\1\0\12\20\64\0\1\55\1\54\1\0\12\20\7\0"+
    "\1\56\1\0\26\32\4\0\1\32\23\0\12\57\61\0"+
    "\1\60\74\0\1\61\7\0\1\54\1\0\12\20\7\0"+
    "\1\62\4\0\1\63\1\64\1\65\1\0\1\66\1\67"+
    "\1\70\1\71\1\0\1\72\2\0\1\73\1\74\1\75"+
    "\16\0\1\76\137\0\1\77\4\0\1\100\5\0\1\101"+
    "\2\0\1\102\2\0\1\103\13\0\2\32\3\0\16\32"+
    "\1\104\4\105\1\106\1\105\1\106\2\105\12\32\6\105"+
    "\14\32\1\33\7\32\20\0\1\32\2\0\12\32\7\0"+
    "\1\56\1\0\26\32\4\0\1\32\20\0\1\32\2\0"+
    "\12\32\7\0\1\107\1\0\20\32\1\110\5\32\4\0"+
    "\1\32\40\0\1\111\100\0\1\112\55\0\1\113\106\0"+
    "\1\114\3\0\1\115\1\0\1\115\25\0\1\43\65\0"+
    "\1\116\15\0\1\117\16\0\4\44\1\120\1\44\1\121"+
    "\14\44\12\122\7\44\1\46\2\44\6\122\24\44\2\47"+
    "\3\0\16\47\12\123\12\47\6\123\24\47\4\51\1\124"+
    "\5\51\1\52\10\51\12\125\7\51\1\53\2\51\6\125"+
    "\24\51\41\0\1\126\37\0\2\32\3\0\16\32\12\105"+
    "\12\32\6\105\24\32\11\0\1\61\11\0\12\57\7\0"+
    "\1\62\4\0\1\63\1\64\1\65\1\0\1\66\1\67"+
    "\1\70\1\71\1\0\1\72\2\0\1\73\1\74\1\75"+
    "\11\0\15\60\1\127\63\60\23\0\1\130\3\0\1\131"+
    "\1\132\1\131\1\132\22\0\1\66\1\67\1\70\1\71"+
    "\1\0\1\72\2\0\1\73\1\74\1\75\55\0\1\133"+
    "\15\0\1\134\62\0\1\135\6\0\1\136\71\0\1\137"+
    "\15\0\1\140\7\0\1\141\52\0\1\142\21\0\1\74"+
    "\56\0\1\143\26\0\1\144\51\0\1\145\16\0\1\134"+
    "\61\0\1\146\11\0\1\67\66\0\1\147\15\0\1\134"+
    "\4\0\1\75\55\0\1\150\4\0\1\134\16\0\1\134"+
    "\1\0\1\134\52\0\1\151\2\0\1\152\51\0\1\153"+
    "\103\0\1\154\3\0\1\155\1\156\1\155\1\156\24\0"+
    "\1\101\2\0\1\102\2\0\1\103\71\0\1\157\66\0"+
    "\1\160\15\0\1\161\62\0\1\162\6\0\1\163\71\0"+
    "\1\164\2\0\1\165\32\0\3\32\1\166\13\0\1\32"+
    "\2\0\1\167\4\170\1\171\1\170\1\171\2\170\7\0"+
    "\1\56\1\0\1\32\6\170\17\32\4\0\1\32\1\0"+
    "\3\32\1\166\13\0\1\32\2\0\12\170\7\0\1\56"+
    "\1\0\1\32\6\170\17\32\4\0\1\32\1\0\3\32"+
    "\1\166\13\0\1\32\2\0\5\170\1\172\4\170\7\0"+
    "\1\56\1\0\1\32\6\170\17\32\4\0\3\32\3\0"+
    "\16\32\1\173\4\105\1\174\1\105\1\174\2\105\12\32"+
    "\6\105\11\32\1\110\12\32\20\0\1\32\2\0\12\32"+
    "\7\0\1\175\1\0\13\32\1\176\12\32\4\0\1\32"+
    "\15\113\1\177\63\113\23\0\1\200\3\0\1\115\1\0"+
    "\1\115\103\0\1\201\67\0\1\202\3\0\1\203\1\0"+
    "\1\203\30\0\1\117\62\0\1\204\20\0\1\205\13\0"+
    "\3\44\2\0\1\44\1\45\35\44\1\46\40\44\1\120"+
    "\1\44\1\45\14\44\12\206\7\44\1\46\2\44\6\206"+
    "\24\44\1\0\3\47\1\207\13\0\1\47\2\0\12\210"+
    "\7\0\1\50\1\0\1\47\6\210\17\47\4\0\1\47"+
    "\3\51\2\0\1\51\1\0\3\51\1\52\31\51\1\53"+
    "\40\51\1\124\1\51\1\0\3\51\1\52\10\51\12\211"+
    "\7\51\1\53\2\51\6\211\24\51\15\60\1\127\4\60"+
    "\1\212\56\60\23\0\1\213\3\0\1\131\1\132\1\131"+
    "\1\132\74\0\1\214\1\215\1\216\1\0\1\217\1\220"+
    "\1\221\13\0\1\222\1\0\1\223\51\0\1\224\1\0"+
    "\1\225\1\226\75\0\1\227\3\0\1\230\1\0\1\230"+
    "\30\0\1\134\41\0\1\231\3\0\1\232\1\0\1\232"+
    "\113\0\1\233\10\0\1\234\46\0\1\235\3\0\1\236"+
    "\1\237\1\236\1\237\27\0\1\140\7\0\1\141\31\0"+
    "\1\240\4\0\1\241\1\0\1\241\33\0\1\74\35\0"+
    "\1\242\4\0\1\243\1\0\1\243\40\0\1\144\30\0"+
    "\1\244\3\0\1\245\1\0\1\245\31\0\1\134\40\0"+
    "\1\246\3\0\1\247\1\0\1\247\24\0\1\67\45\0"+
    "\1\250\3\0\1\230\1\251\1\230\1\251\27\0\1\134"+
    "\4\0\1\75\34\0\1\252\3\0\1\253\1\254\1\253"+
    "\1\254\35\0\1\134\1\0\1\134\31\0\1\255\3\0"+
    "\1\256\1\0\1\256\113\0\1\257\5\0\1\234\46\0"+
    "\1\260\103\0\1\261\3\0\1\155\1\156\1\155\1\156"+
    "\102\0\1\262\15\0\1\263\51\0\1\264\124\0\1\265"+
    "\54\0\1\266\3\0\1\267\1\0\1\267\30\0\1\161"+
    "\62\0\1\270\20\0\1\271\36\0\1\272\3\0\1\273"+
    "\1\0\1\273\113\0\1\274\5\0\1\275\51\0\1\276"+
    "\3\0\1\277\1\0\1\277\113\0\1\300\10\0\1\301"+
    "\25\0\1\32\15\0\1\32\2\0\12\32\7\0\1\56"+
    "\1\0\26\32\4\0\1\32\1\0\3\32\1\166\13\0"+
    "\1\32\2\0\1\302\4\303\1\304\1\303\1\304\2\303"+
    "\7\0\1\56\1\0\1\32\6\303\17\32\4\0\1\32"+
    "\1\0\3\32\1\166\13\0\1\32\2\0\12\303\7\0"+
    "\1\56\1\0\1\32\6\303\17\32\4\0\1\32\1\0"+
    "\3\32\1\166\13\0\1\32\2\0\5\303\1\305\4\303"+
    "\7\0\1\56\1\0\1\32\6\303\17\32\4\0\1\32"+
    "\1\0\3\33\1\306\13\0\1\32\2\0\12\303\7\0"+
    "\1\107\1\0\1\32\6\303\11\32\1\110\5\32\4\0"+
    "\1\32\1\0\3\32\1\166\13\0\1\32\2\0\1\307"+
    "\4\170\1\310\1\170\1\310\2\170\7\0\1\56\1\0"+
    "\1\32\6\170\17\32\4\0\1\32\1\0\3\32\1\166"+
    "\13\0\1\32\2\0\2\170\1\311\7\170\7\0\1\56"+
    "\1\0\1\32\6\170\17\32\4\0\3\32\3\0\16\32"+
    "\1\312\3\105\1\313\1\105\1\313\3\105\12\32\6\105"+
    "\4\32\1\176\17\32\13\0\1\314\4\0\1\32\2\0"+
    "\12\32\7\0\1\56\1\0\26\32\4\0\1\32\15\113"+
    "\1\177\4\113\1\40\56\113\23\0\1\315\3\0\1\115"+
    "\1\0\1\115\50\0\3\43\1\316\37\0\1\116\15\0"+
    "\1\117\41\0\1\317\3\0\1\203\1\0\1\203\121\0"+
    "\1\320\51\0\1\321\4\0\1\322\1\0\1\322\32\0"+
    "\1\205\57\0\1\323\17\0\1\324\14\0\4\44\1\120"+
    "\1\44\1\45\14\44\12\325\7\44\1\46\2\44\6\325"+
    "\24\44\2\0\1\47\15\0\1\47\2\0\12\47\7\0"+
    "\1\50\1\0\26\47\4\0\1\47\1\0\3\47\1\207"+
    "\13\0\1\47\2\0\12\326\7\0\1\50\1\0\1\47"+
    "\6\326\17\47\4\0\1\47\4\51\1\124\1\51\1\0"+
    "\3\51\1\52\10\51\12\327\7\51\1\53\2\51\6\327"+
    "\24\51\23\0\1\330\3\0\1\131\1\132\1\131\1\132"+
    "\47\0\3\63\1\331\37\0\1\133\15\0\1\134\17\0"+
    "\3\64\1\332\37\0\1\135\6\0\1\136\26\0\3\65"+
    "\1\333\37\0\1\137\15\0\1\140\7\0\1\141\7\0"+
    "\3\66\1\334\37\0\1\142\21\0\1\74\13\0\3\67"+
    "\1\335\37\0\1\143\26\0\1\144\6\0\3\70\1\336"+
    "\37\0\1\145\16\0\1\134\16\0\3\71\1\337\37\0"+
    "\1\146\11\0\1\67\23\0\3\72\1\340\37\0\1\147"+
    "\15\0\1\134\4\0\1\75\12\0\3\73\1\341\37\0"+
    "\1\150\4\0\1\134\16\0\1\134\1\0\1\134\7\0"+
    "\3\74\1\342\37\0\1\151\2\0\1\152\32\0\3\75"+
    "\1\343\117\0\1\344\3\0\1\230\1\0\1\230\121\0"+
    "\1\345\51\0\1\346\3\0\1\232\1\0\1\232\77\0"+
    "\1\347\73\0\1\350\3\0\1\351\1\0\1\351\23\0"+
    "\1\234\46\0\1\352\3\0\1\236\1\237\1\236\1\237"+
    "\120\0\1\353\61\0\1\354\70\0\1\355\4\0\1\241"+
    "\1\0\1\241\73\0\1\225\76\0\1\356\4\0\1\243"+
    "\1\0\1\243\115\0\1\357\54\0\1\360\3\0\1\245"+
    "\1\0\1\245\122\0\1\345\50\0\1\361\3\0\1\247"+
    "\1\0\1\247\102\0\1\220\70\0\1\362\3\0\1\230"+
    "\1\251\1\230\1\251\74\0\1\226\75\0\1\363\3\0"+
    "\1\253\1\254\1\253\1\254\74\0\1\345\101\0\1\345"+
    "\3\0\1\345\70\0\1\364\3\0\1\256\1\0\1\256"+
    "\73\0\1\365\77\0\1\366\3\0\1\367\1\0\1\367"+
    "\72\0\1\370\3\0\1\155\1\156\1\155\1\156\47\0"+
    "\3\101\1\371\37\0\1\160\15\0\1\161\17\0\3\102"+
    "\1\372\37\0\1\162\6\0\1\163\26\0\3\103\1\373"+
    "\37\0\1\164\2\0\1\165\117\0\1\374\35\0\1\375"+
    "\3\0\1\267\1\0\1\267\121\0\1\376\51\0\1\377"+
    "\4\0\1\u0100\1\0\1\u0100\32\0\1\271\57\0\1\u0101"+
    "\17\0\1\u0102\37\0\1\u0103\3\0\1\273\1\0\1\273"+
    "\77\0\1\u0104\73\0\1\u0105\3\0\1\u0106\1\0\1\u0106"+
    "\113\0\1\u0107\12\0\1\u0108\44\0\1\u0109\3\0\1\277"+
    "\1\0\1\277\73\0\1\u010a\77\0\1\u010b\3\0\1\u010c"+
    "\1\0\1\u010c\23\0\1\301\67\0\1\u010d\6\0\1\u010e"+
    "\26\0\3\32\1\166\13\0\1\32\2\0\1\u010f\4\u0110"+
    "\1\u0111\1\u0110\1\u0111\2\u0110\7\0\1\56\1\0\1\32"+
    "\6\u0110\17\32\4\0\1\32\1\0\3\32\1\166\13\0"+
    "\1\32\2\0\12\u0110\7\0\1\56\1\0\1\32\6\u0110"+
    "\17\32\4\0\1\32\1\0\3\32\1\166\13\0\1\32"+
    "\2\0\5\u0110\1\u0112\4\u0110\7\0\1\56\1\0\1\32"+
    "\6\u0110\17\32\4\0\1\32\1\0\3\33\1\306\13\0"+
    "\1\32\2\0\12\u0110\7\0\1\107\1\0\1\32\6\u0110"+
    "\11\32\1\110\5\32\4\0\1\32\2\0\1\33\15\0"+
    "\1\32\2\0\12\32\7\0\1\107\1\0\20\32\1\110"+
    "\5\32\4\0\1\32\1\0\3\32\1\166\13\0\1\32"+
    "\2\0\1\u0113\4\303\1\u0114\1\303\1\u0114\2\303\7\0"+
    "\1\56\1\0\1\32\6\303\17\32\4\0\1\32\1\0"+
    "\3\32\1\166\13\0\1\32\2\0\2\303\1\u0115\7\303"+
    "\7\0\1\56\1\0\1\32\6\303\17\32\4\0\1\32"+
    "\1\0\3\110\1\u0116\13\0\1\32\2\0\12\303\7\0"+
    "\1\175\1\0\1\32\6\303\4\32\1\176\12\32\4\0"+
    "\1\32\1\0\3\32\1\166\13\0\1\32\2\0\1\u0117"+
    "\3\170\1\u0118\1\170\1\u0118\3\170\7\0\1\56\1\0"+
    "\1\32\6\170\17\32\4\0\1\32\1\0\3\32\1\166"+
    "\13\0\1\32\2\0\12\170\7\0\1\56\1\0\1\32"+
    "\2\170\1\u0119\3\170\17\32\4\0\1\32\1\0\4\314"+
    "\1\u011a\1\u011b\3\u011a\1\u011c\1\0\1\u011d\1\u011a\2\0"+
    "\1\u011a\23\0\1\u011e\32\0\2\u011a\23\0\1\u011f\3\0"+
    "\1\115\1\0\1\115\51\0\1\43\41\0\1\116\15\0"+
    "\1\117\41\0\1\u0120\3\0\1\203\1\0\1\203\50\0"+
    "\3\117\1\u0121\37\0\1\204\20\0\1\205\36\0\1\u0122"+
    "\4\0\1\322\1\0\1\322\71\0\1\u0123\100\0\1\u0124"+
    "\3\0\1\u0125\1\0\1\u0125\32\0\1\324\60\0\1\u0126"+
    "\21\0\1\u0127\12\0\4\44\1\120\1\44\1\45\14\44"+
    "\12\u0128\7\44\1\46\2\44\6\u0128\24\44\1\0\3\47"+
    "\1\207\13\0\1\47\2\0\12\u0129\7\0\1\50\1\0"+
    "\1\47\6\u0129\17\47\4\0\1\47\4\51\1\124\1\51"+
    "\1\0\3\51\1\52\10\51\12\u012a\7\51\1\53\2\51"+
    "\6\u012a\24\51\23\0\1\u012b\3\0\1\131\1\132\1\131"+
    "\1\132\50\0\1\63\41\0\1\133\15\0\1\134\20\0"+
    "\1\64\41\0\1\135\6\0\1\136\27\0\1\65\41\0"+
    "\1\137\15\0\1\140\7\0\1\141\10\0\1\66\41\0"+
    "\1\142\21\0\1\74\14\0\1\67\41\0\1\143\26\0"+
    "\1\144\7\0\1\70\41\0\1\145\16\0\1\134\17\0"+
    "\1\71\41\0\1\146\11\0\1\67\24\0\1\72\41\0"+
    "\1\147\15\0\1\134\4\0\1\75\13\0\1\73\41\0"+
    "\1\150\4\0\1\134\16\0\1\134\1\0\1\134\10\0"+
    "\1\74\41\0\1\151\2\0\1\152\33\0\1\75\121\0"+
    "\1\u012c\3\0\1\230\1\0\1\230\50\0\3\134\1\u012d"+
    "\117\0\1\u012e\3\0\1\232\1\0\1\232\50\0\3\136"+
    "\1\u012f\37\0\1\233\10\0\1\234\46\0\1\u0130\3\0"+
    "\1\351\1\0\1\351\101\0\1\u0131\71\0\1\u0132\3\0"+
    "\1\236\1\237\1\236\1\237\47\0\3\140\1\u0133\75\0"+
    "\3\141\1\u0134\117\0\1\u0135\4\0\1\241\1\0\1\241"+
    "\71\0\1\u0136\4\0\1\243\1\0\1\243\47\0\3\144"+
    "\1\u0137\117\0\1\u0138\3\0\1\245\1\0\1\245\72\0"+
    "\1\u0139\3\0\1\247\1\0\1\247\72\0\1\u013a\3\0"+
    "\1\230\1\251\1\230\1\251\71\0\1\u013b\3\0\1\253"+
    "\1\254\1\253\1\254\71\0\1\u013c\3\0\1\256\1\0"+
    "\1\256\50\0\3\152\1\u013d\37\0\1\257\5\0\1\234"+
    "\51\0\1\u013e\3\0\1\367\1\0\1\367\76\0\1\u0131"+
    "\74\0\1\u013f\3\0\1\155\1\156\1\155\1\156\50\0"+
    "\1\101\41\0\1\160\15\0\1\161\20\0\1\102\41\0"+
    "\1\162\6\0\1\163\27\0\1\103\41\0\1\164\2\0"+
    "\1\165\120\0\1\u0140\34\0\1\u0141\3\0\1\267\1\0"+
    "\1\267\50\0\3\161\1\u0142\37\0\1\270\20\0\1\271"+
    "\36\0\1\u0143\4\0\1\u0100\1\0\1\u0100\71\0\1\u0144"+
    "\100\0\1\u0145\3\0\1\u0146\1\0\1\u0146\32\0\1\u0102"+
    "\60\0\1\u0147\21\0\1\u0148\35\0\1\u0149\3\0\1\273"+
    "\1\0\1\273\50\0\3\163\1\u014a\37\0\1\274\5\0"+
    "\1\275\51\0\1\u014b\3\0\1\u0106\1\0\1\u0106\76\0"+
    "\1\u014c\74\0\1\u014d\3\0\1\u014e\1\0\1\u014e\25\0"+
    "\1\u0108\65\0\1\u014f\2\0\1\u0150\54\0\1\u0151\3\0"+
    "\1\277\1\0\1\277\50\0\3\165\1\u0152\37\0\1\300"+
    "\10\0\1\301\46\0\1\u0153\3\0\1\u010c\1\0\1\u010c"+
    "\101\0\1\u0154\71\0\1\u0155\3\0\1\u0156\1\0\1\u0156"+
    "\50\0\3\32\1\166\13\0\1\32\2\0\5\u0157\1\u0158"+
    "\1\u0157\1\u0158\2\u0157\7\0\1\56\1\0\1\32\6\u0157"+
    "\17\32\4\0\1\32\1\0\3\32\1\166\13\0\1\32"+
    "\2\0\12\u0157\7\0\1\56\1\0\1\32\6\u0157\17\32"+
    "\4\0\1\32\1\0\3\32\1\166\13\0\1\32\2\0"+
    "\5\u0157\1\u0159\4\u0157\7\0\1\56\1\0\1\32\6\u0157"+
    "\17\32\4\0\1\32\1\0\3\33\1\306\13\0\1\32"+
    "\2\0\12\u0157\7\0\1\107\1\0\1\32\6\u0157\11\32"+
    "\1\110\5\32\4\0\1\32\1\0\3\32\1\166\13\0"+
    "\1\32\2\0\1\u015a\4\u0110\1\u015b\1\u0110\1\u015b\2\u0110"+
    "\7\0\1\56\1\0\1\32\6\u0110\17\32\4\0\1\32"+
    "\1\0\3\32\1\166\13\0\1\32\2\0\2\u0110\1\u015c"+
    "\7\u0110\7\0\1\56\1\0\1\32\6\u0110\17\32\4\0"+
    "\1\32\1\0\3\110\1\u0116\13\0\1\32\2\0\12\u0110"+
    "\7\0\1\175\1\0\1\32\6\u0110\4\32\1\176\12\32"+
    "\4\0\1\32\2\0\1\110\15\0\1\32\2\0\12\32"+
    "\7\0\1\175\1\0\13\32\1\176\12\32\4\0\1\32"+
    "\1\0\3\32\1\166\13\0\1\32\2\0\1\u015d\3\303"+
    "\1\u015e\1\303\1\u015e\3\303\7\0\1\56\1\0\1\32"+
    "\6\303\17\32\4\0\1\32\1\0\3\32\1\166\13\0"+
    "\1\32\2\0\12\303\7\0\1\56\1\0\1\32\2\303"+
    "\1\u015f\3\303\17\32\4\0\1\32\1\0\3\176\1\u0160"+
    "\6\0\1\314\4\0\1\32\2\0\12\303\7\0\1\56"+
    "\1\0\1\32\6\303\17\32\4\0\1\32\1\0\4\u0161"+
    "\1\u011a\1\0\3\u011a\2\0\1\u011d\1\u011a\2\0\1\u011a"+
    "\23\0\1\u011e\32\0\2\u011a\2\u011b\3\0\1\u011b\1\u0161"+
    "\35\u011b\1\u0162\34\u011b\2\u011c\3\0\1\u011c\1\0\3\u011c"+
    "\1\u0163\31\u011c\1\u0164\34\u011c\2\u011a\3\0\16\u011a\12\u0165"+
    "\12\u011a\6\u0165\24\u011a\27\0\1\115\1\0\1\115\72\0"+
    "\1\u0166\3\0\1\203\1\0\1\203\51\0\1\117\41\0"+
    "\1\204\20\0\1\205\36\0\1\u0167\4\0\1\322\1\0"+
    "\1\322\47\0\3\205\1\u0168\37\0\1\323\17\0\1\324"+
    "\37\0\1\u0169\3\0\1\u0125\1\0\1\u0125\123\0\1\u016a"+
    "\47\0\1\u016b\4\0\1\u016c\1\0\1\u016c\33\0\1\u0127"+
    "\56\0\1\u016d\23\0\1\u016e\10\0\4\44\1\120\1\44"+
    "\1\45\14\44\12\u016f\7\44\1\46\2\44\6\u016f\24\44"+
    "\1\0\3\47\1\207\13\0\1\47\2\0\12\u0170\7\0"+
    "\1\50\1\0\1\47\6\u0170\17\47\4\0\1\47\4\51"+
    "\1\124\1\51\1\0\3\51\1\52\10\51\12\u0171\7\51"+
    "\1\53\2\51\6\u0171\24\51\27\0\1\131\1\132\1\131"+
    "\1\132\71\0\1\u0172\3\0\1\230\1\0\1\230\51\0"+
    "\1\134\121\0\1\u0173\3\0\1\232\1\0\1\232\51\0"+
    "\1\136\41\0\1\233\10\0\1\234\46\0\1\u0174\3\0"+
    "\1\351\1\0\1\351\50\0\3\234\1\u0175\117\0\1\u0176"+
    "\3\0\1\236\1\237\1\236\1\237\50\0\1\140\100\0"+
    "\1\141\121\0\1\u0177\4\0\1\241\1\0\1\241\71\0"+
    "\1\u0178\4\0\1\243\1\0\1\243\50\0\1\144\121\0"+
    "\1\u0179\3\0\1\245\1\0\1\245\72\0\1\u017a\3\0"+
    "\1\247\1\0\1\247\72\0\1\u017b\3\0\1\230\1\251"+
    "\1\230\1\251\71\0\1\u017c\3\0\1\253\1\254\1\253"+
    "\1\254\71\0\1\u017d\3\0\1\256\1\0\1\256\51\0"+
    "\1\152\41\0\1\257\5\0\1\234\51\0\1\u017e\3\0"+
    "\1\367\1\0\1\367\76\0\1\155\1\156\1\155\1\156"+
    "\121\0\1\u017f\50\0\1\u0180\3\0\1\267\1\0\1\267"+
    "\51\0\1\161\41\0\1\270\20\0\1\271\36\0\1\u0181"+
    "\4\0\1\u0100\1\0\1\u0100\47\0\3\271\1\u0182\37\0"+
    "\1\u0101\17\0\1\u0102\37\0\1\u0183\3\0\1\u0146\1\0"+
    "\1\u0146\123\0\1\u0184\47\0\1\u0185\4\0\1\u0186\1\0"+
    "\1\u0186\33\0\1\u0148\56\0\1\u0187\23\0\1\u0188\33\0"+
    "\1\u0189\3\0\1\273\1\0\1\273\51\0\1\163\41\0"+
    "\1\274\5\0\1\275\51\0\1\u018a\3\0\1\u0106\1\0"+
    "\1\u0106\50\0\3\275\1\u018b\37\0\1\u0107\12\0\1\u0108"+
    "\44\0\1\u018c\3\0\1\u014e\1\0\1\u014e\103\0\1\u018d"+
    "\67\0\1\u018e\3\0\1\u018f\1\0\1\u018f\72\0\1\u0190"+
    "\3\0\1\277\1\0\1\277\51\0\1\165\41\0\1\300"+
    "\10\0\1\301\46\0\1\u0191\3\0\1\u010c\1\0\1\u010c"+
    "\50\0\3\301\1\u0192\37\0\1\u010d\6\0\1\u010e\50\0"+
    "\1\u0193\3\0\1\u0156\1\0\1\u0156\77\0\1\u0194\51\0"+
    "\3\32\1\166\13\0\1\32\2\0\12\u0195\7\0\1\56"+
    "\1\0\1\32\6\u0195\17\32\4\0\1\32\1\0\3\32"+
    "\1\166\13\0\1\32\2\0\5\u0195\1\u0196\4\u0195\7\0"+
    "\1\56\1\0\1\32\6\u0195\17\32\4\0\1\32\1\0"+
    "\3\33\1\306\13\0\1\32\2\0\12\u0195\7\0\1\107"+
    "\1\0\1\32\6\u0195\11\32\1\110\5\32\4\0\1\32"+
    "\1\0\3\32\1\166\13\0\1\32\2\0\5\u0157\1\u0197"+
    "\1\u0157\1\u0197\2\u0157\7\0\1\56\1\0\1\32\6\u0157"+
    "\17\32\4\0\1\32\1\0\3\32\1\166\13\0\1\32"+
    "\2\0\2\u0157\1\u0198\7\u0157\7\0\1\56\1\0\1\32"+
    "\6\u0157\17\32\4\0\1\32\1\0\3\110\1\u0116\13\0"+
    "\1\32\2\0\12\u0157\7\0\1\175\1\0\1\32\6\u0157"+
    "\4\32\1\176\12\32\4\0\1\32\1\0\3\32\1\166"+
    "\13\0\1\32\2\0\1\u0199\3\u0110\1\u019a\1\u0110\1\u019a"+
    "\3\u0110\7\0\1\56\1\0\1\32\6\u0110\17\32\4\0"+
    "\1\32\1\0\3\32\1\166\13\0\1\32\2\0\12\u0110"+
    "\7\0\1\56\1\0\1\32\2\u0110\1\u019b\3\u0110\17\32"+
    "\4\0\1\32\1\0\3\176\1\u0160\6\0\1\314\4\0"+
    "\1\32\2\0\12\u0110\7\0\1\56\1\0\1\32\6\u0110"+
    "\17\32\4\0\1\32\2\0\1\176\10\0\1\314\4\0"+
    "\1\32\2\0\12\32\7\0\1\56\1\0\26\32\4\0"+
    "\1\32\1\0\4\u0161\7\0\1\u011d\64\0\4\u011b\1\u019c"+
    "\1\u011b\1\u019d\14\u011b\12\u019e\7\u011b\1\u0162\2\u011b\6\u019e"+
    "\24\u011b\1\u011c\1\u0163\3\u0161\1\u011c\1\0\3\u011c\1\u0163"+
    "\1\u011c\1\u019f\27\u011c\1\u0164\40\u011c\1\u01a0\5\u011c\1\u0163"+
    "\10\u011c\12\u01a1\7\u011c\1\u0164\2\u011c\6\u01a1\24\u011c\1\0"+
    "\3\u011a\1\u01a2\1\u011a\1\0\3\u011a\2\0\1\u011d\1\u011a"+
    "\2\0\1\u011a\2\0\12\u01a3\7\0\1\u011e\2\0\6\u01a3"+
    "\22\0\2\u011a\27\0\1\203\1\0\1\203\72\0\1\u01a4"+
    "\4\0\1\322\1\0\1\322\50\0\1\205\41\0\1\323"+
    "\17\0\1\324\37\0\1\u01a5\3\0\1\u0125\1\0\1\u0125"+
    "\50\0\3\324\1\u01a6\37\0\1\u0126\21\0\1\u0127\35\0"+
    "\1\u01a7\4\0\1\u016c\1\0\1\u016c\73\0\1\u01a8\76\0"+
    "\1\u01a9\4\0\1\u01aa\1\0\1\u01aa\35\0\1\u016e\54\0"+
    "\1\u01ab\2\0\1\u01ac\31\0\4\44\1\120\1\44\1\45"+
    "\14\44\12\u01ad\7\44\1\46\2\44\6\u01ad\24\44\1\0"+
    "\3\47\1\207\13\0\1\47\2\0\12\u01ae\7\0\1\50"+
    "\1\0\1\47\6\u01ae\17\47\4\0\1\47\4\51\1\124"+
    "\1\51\1\0\3\51\1\52\10\51\12\u01af\7\51\1\53"+
    "\2\51\6\u01af\24\51\27\0\1\230\1\0\1\230\76\0"+
    "\1\232\1\0\1\232\72\0\1\u01b0\3\0\1\351\1\0"+
    "\1\351\51\0\1\234\125\0\1\236\1\237\1\236\1\237"+
    "\76\0\1\241\1\0\1\241\76\0\1\243\1\0\1\243"+
    "\75\0\1\245\1\0\1\245\76\0\1\247\1\0\1\247"+
    "\76\0\1\230\1\251\1\230\1\251\75\0\1\253\1\254"+
    "\1\253\1\254\75\0\1\256\1\0\1\256\72\0\1\u01b1"+
    "\3\0\1\367\1\0\1\367\137\0\1\u01b2\37\0\1\267"+
    "\1\0\1\267\72\0\1\u01b3\4\0\1\u0100\1\0\1\u0100"+
    "\50\0\1\271\41\0\1\u0101\17\0\1\u0102\37\0\1\u01b4"+
    "\3\0\1\u0146\1\0\1\u0146\50\0\3\u0102\1\u01b5\37\0"+
    "\1\u0147\21\0\1\u0148\35\0\1\u01b6\4\0\1\u0186\1\0"+
    "\1\u0186\73\0\1\u01b7\76\0\1\u01b8\4\0\1\u01b9\1\0"+
    "\1\u01b9\35\0\1\u0188\37\0\1\273\1\0\1\273\72\0"+
    "\1\u01ba\3\0\1\u0106\1\0\1\u0106\51\0\1\275\41\0"+
    "\1\u0107\12\0\1\u0108\44\0\1\u01bb\3\0\1\u014e\1\0"+
    "\1\u014e\50\0\3\u0108\1\u01bc\37\0\1\u014f\2\0\1\u0150"+
    "\54\0\1\u01bd\3\0\1\u018f\1\0\1\u018f\73\0\1\u01be"+
    "\103\0\1\277\1\0\1\277\72\0\1\u01bf\3\0\1\u010c"+
    "\1\0\1\u010c\51\0\1\301\41\0\1\u010d\6\0\1\u010e"+
    "\50\0\1\u01c0\3\0\1\u0156\1\0\1\u0156\50\0\3\u010e"+
    "\1\u01c1\75\0\3\32\1\166\13\0\1\32\2\0\12\32"+
    "\7\0\1\56\1\0\26\32\4\0\1\32\1\0\3\33"+
    "\1\306\13\0\1\32\2\0\12\32\7\0\1\107\1\0"+
    "\20\32\1\110\5\32\4\0\1\32\1\0\3\32\1\166"+
    "\13\0\1\32\2\0\2\u0195\1\u01c2\7\u0195\7\0\1\56"+
    "\1\0\1\32\6\u0195\17\32\4\0\1\32\1\0\3\110"+
    "\1\u0116\13\0\1\32\2\0\12\u0195\7\0\1\175\1\0"+
    "\1\32\6\u0195\4\32\1\176\12\32\4\0\1\32\1\0"+
    "\3\32\1\166\13\0\1\32\2\0\4\u0157\1\u01c3\1\u0157"+
    "\1\u01c3\3\u0157\7\0\1\56\1\0\1\32\6\u0157\17\32"+
    "\4\0\1\32\1\0\3\32\1\166\13\0\1\32\2\0"+
    "\12\u0157\7\0\1\56\1\0\1\32\2\u0157\1\u01c4\3\u0157"+
    "\17\32\4\0\1\32\1\0\3\176\1\u0160\6\0\1\314"+
    "\4\0\1\32\2\0\12\u0157\7\0\1\56\1\0\1\32"+
    "\6\u0157\17\32\4\0\1\32\3\u011b\2\0\1\u011b\1\u0161"+
    "\35\u011b\1\u0162\35\u011b\1\u019d\3\u0161\1\u011b\1\u0161\5\u011b"+
    "\1\u01c5\27\u011b\1\u0162\40\u011b\1\u019c\1\u011b\1\u0161\14\u011b"+
    "\12\u01c6\7\u011b\1\u0162\2\u011b\6\u01c6\24\u011b\3\u011c\2\0"+
    "\1\u011c\1\0\3\u011c\1\u0163\31\u011c\1\u0164\40\u011c\1\u01a0"+
    "\1\u011c\1\0\3\u011c\1\u0163\10\u011c\12\u01c7\7\u011c\1\u0164"+
    "\2\u011c\6\u01c7\24\u011c\1\0\1\u0161\1\u011a\2\u0161\1\u011a"+
    "\1\0\3\u011a\2\0\1\u011d\1\u011a\2\0\1\u011a\23\0"+
    "\1\u011e\32\0\2\u011a\1\0\3\u011a\1\u01a2\1\u011a\1\0"+
    "\3\u011a\2\0\1\u011d\1\u011a\2\0\1\u011a\2\0\12\u01c8"+
    "\7\0\1\u011e\2\0\6\u01c8\22\0\2\u011a\30\0\1\322"+
    "\1\0\1\322\71\0\1\u01c9\3\0\1\u0125\1\0\1\u0125"+
    "\51\0\1\324\41\0\1\u0126\21\0\1\u0127\35\0\1\u01ca"+
    "\4\0\1\u016c\1\0\1\u016c\47\0\3\u0127\1\u01cb\37\0"+
    "\1\u016d\23\0\1\u016e\33\0\1\u01cc\4\0\1\u01aa\1\0"+
    "\1\u01aa\75\0\1\u01cd\74\0\1\u01ce\3\0\1\u01cf\1\0"+
    "\1\u01cf\113\0\1\u01d0\16\0\1\u01d1\15\0\4\44\1\120"+
    "\1\44\1\45\35\44\1\46\34\44\1\0\3\47\1\207"+
    "\13\0\1\47\2\0\12\47\7\0\1\50\1\0\26\47"+
    "\4\0\1\47\4\51\1\124\1\51\1\0\3\51\1\52"+
    "\31\51\1\53\34\51\27\0\1\351\1\0\1\351\76\0"+
    "\1\367\1\0\1\367\77\0\1\u0100\1\0\1\u0100\71\0"+
    "\1\u01d2\3\0\1\u0146\1\0\1\u0146\51\0\1\u0102\41\0"+
    "\1\u0147\21\0\1\u0148\35\0\1\u01d3\4\0\1\u0186\1\0"+
    "\1\u0186\47\0\3\u0148\1\u01d4\37\0\1\u0187\23\0\1\u0188"+
    "\33\0\1\u01d5\4\0\1\u01b9\1\0\1\u01b9\75\0\1\u01d6"+
    "\100\0\1\u0106\1\0\1\u0106\72\0\1\u01d7\3\0\1\u014e"+
    "\1\0\1\u014e\51\0\1\u0108\41\0\1\u014f\2\0\1\u0150"+
    "\54\0\1\u01d8\3\0\1\u018f\1\0\1\u018f\50\0\3\u0150"+
    "\1\u01d9\123\0\1\u010c\1\0\1\u010c\72\0\1\u01da\3\0"+
    "\1\u0156\1\0\1\u0156\51\0\1\u010e\77\0\3\110\1\u0116"+
    "\13\0\1\32\2\0\12\32\7\0\1\175\1\0\13\32"+
    "\1\176\12\32\4\0\1\32\1\0\3\32\1\166\13\0"+
    "\1\32\2\0\12\u0195\7\0\1\56\1\0\1\32\2\u0195"+
    "\1\u01db\3\u0195\17\32\4\0\1\32\1\0\3\176\1\u0160"+
    "\6\0\1\314\4\0\1\32\2\0\12\u0195\7\0\1\56"+
    "\1\0\1\32\6\u0195\17\32\4\0\1\32\4\u011b\1\u019c"+
    "\1\u011b\1\u0161\14\u011b\12\u01dc\7\u011b\1\u0162\2\u011b\6\u01dc"+
    "\24\u011b\4\u011c\1\u01a0\1\u011c\1\0\3\u011c\1\u0163\10\u011c"+
    "\12\u01dd\7\u011c\1\u0164\2\u011c\6\u01dd\24\u011c\1\0\3\u011a"+
    "\1\u01a2\1\u011a\1\0\3\u011a\2\0\1\u011d\1\u011a\2\0"+
    "\1\u011a\2\0\12\u01de\7\0\1\u011e\2\0\6\u01de\22\0"+
    "\2\u011a\27\0\1\u0125\1\0\1\u0125\72\0\1\u01df\4\0"+
    "\1\u016c\1\0\1\u016c\50\0\1\u0127\41\0\1\u016d\23\0"+
    "\1\u016e\33\0\1\u01e0\4\0\1\u01aa\1\0\1\u01aa\47\0"+
    "\3\u016e\1\u01e1\37\0\1\u01ab\2\0\1\u01ac\54\0\1\u01e2"+
    "\3\0\1\u01cf\1\0\1\u01cf\73\0\1\u01e3\77\0\1\u01e4"+
    "\3\0\1\u01e5\1\0\1\u01e5\31\0\1\u01d1\61\0\1\u01e6"+
    "\23\0\1\u01e7\37\0\1\u0146\1\0\1\u0146\72\0\1\u01e8"+
    "\4\0\1\u0186\1\0\1\u0186\50\0\1\u0148\41\0\1\u0187"+
    "\23\0\1\u0188\33\0\1\u01e9\4\0\1\u01b9\1\0\1\u01b9"+
    "\47\0\3\u0188\1\u01ea\123\0\1\u014e\1\0\1\u014e\72\0"+
    "\1\u01eb\3\0\1\u018f\1\0\1\u018f\51\0\1\u0150\125\0"+
    "\1\u0156\1\0\1\u0156\50\0\3\176\1\u0160\6\0\1\314"+
    "\4\0\1\32\2\0\12\32\7\0\1\56\1\0\26\32"+
    "\4\0\1\32\4\u011b\1\u019c\1\u011b\1\u0161\14\u011b\12\u01ec"+
    "\7\u011b\1\u0162\2\u011b\6\u01ec\24\u011b\4\u011c\1\u01a0\1\u011c"+
    "\1\0\3\u011c\1\u0163\10\u011c\12\u01ed\7\u011c\1\u0164\2\u011c"+
    "\6\u01ed\24\u011c\1\0\3\u011a\1\u01a2\1\u011a\1\0\3\u011a"+
    "\2\0\1\u011d\1\u011a\2\0\1\u011a\2\0\12\u01ee\7\0"+
    "\1\u011e\2\0\6\u01ee\22\0\2\u011a\30\0\1\u016c\1\0"+
    "\1\u016c\71\0\1\u01ef\4\0\1\u01aa\1\0\1\u01aa\50\0"+
    "\1\u016e\41\0\1\u01ab\2\0\1\u01ac\54\0\1\u01f0\3\0"+
    "\1\u01cf\1\0\1\u01cf\50\0\3\u01ac\1\u01f1\37\0\1\u01d0"+
    "\16\0\1\u01d1\40\0\1\u01f2\3\0\1\u01e5\1\0\1\u01e5"+
    "\122\0\1\u01f3\50\0\1\u01f4\4\0\1\u01f5\1\0\1\u01f5"+
    "\35\0\1\u01e7\40\0\1\u0186\1\0\1\u0186\71\0\1\u01f6"+
    "\4\0\1\u01b9\1\0\1\u01b9\50\0\1\u0188\125\0\1\u018f"+
    "\1\0\1\u018f\47\0\4\u011b\1\u019c\1\u011b\1\u0161\14\u011b"+
    "\12\u01f7\7\u011b\1\u0162\2\u011b\6\u01f7\24\u011b\4\u011c\1\u01a0"+
    "\1\u011c\1\0\3\u011c\1\u0163\10\u011c\12\u01f8\7\u011c\1\u0164"+
    "\2\u011c\6\u01f8\24\u011c\1\0\3\u011a\1\u01a2\1\u011a\1\0"+
    "\3\u011a\2\0\1\u011d\1\u011a\2\0\1\u011a\2\0\12\u01f9"+
    "\7\0\1\u011e\2\0\6\u01f9\22\0\2\u011a\30\0\1\u01aa"+
    "\1\0\1\u01aa\71\0\1\u01fa\3\0\1\u01cf\1\0\1\u01cf"+
    "\51\0\1\u01ac\41\0\1\u01d0\16\0\1\u01d1\40\0\1\u01fb"+
    "\3\0\1\u01e5\1\0\1\u01e5\50\0\3\u01d1\1\u01fc\37\0"+
    "\1\u01e6\23\0\1\u01e7\33\0\1\u01fd\4\0\1\u01f5\1\0"+
    "\1\u01f5\75\0\1\u01fe\101\0\1\u01b9\1\0\1\u01b9\46\0"+
    "\4\u011b\1\u019c\1\u011b\1\u0161\14\u011b\12\u01ff\7\u011b\1\u0162"+
    "\2\u011b\6\u01ff\24\u011b\4\u011c\1\u01a0\1\u011c\1\0\3\u011c"+
    "\1\u0163\10\u011c\12\u0200\7\u011c\1\u0164\2\u011c\6\u0200\24\u011c"+
    "\1\0\3\u011a\1\u01a2\1\u011a\1\0\3\u011a\2\0\1\u011d"+
    "\1\u011a\2\0\1\u011a\23\0\1\u011e\32\0\2\u011a\27\0"+
    "\1\u01cf\1\0\1\u01cf\72\0\1\u0201\3\0\1\u01e5\1\0"+
    "\1\u01e5\51\0\1\u01d1\41\0\1\u01e6\23\0\1\u01e7\33\0"+
    "\1\u0202\4\0\1\u01f5\1\0\1\u01f5\47\0\3\u01e7\1\u0203"+
    "\74\0\4\u011b\1\u019c\1\u011b\1\u0161\35\u011b\1\u0162\34\u011b"+
    "\4\u011c\1\u01a0\1\u011c\1\0\3\u011c\1\u0163\31\u011c\1\u0164"+
    "\34\u011c\27\0\1\u01e5\1\0\1\u01e5\72\0\1\u0204\4\0"+
    "\1\u01f5\1\0\1\u01f5\50\0\1\u01e7\126\0\1\u01f5\1\0"+
    "\1\u01f5\46\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[30940];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\3\11\1\1\1\11\4\1\2\11"+
    "\1\1\2\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\5\0\1\11\1\0\1\1\2\0"+
    "\1\1\4\0\1\1\1\0\1\11\13\0\1\11\6\0"+
    "\3\1\1\0\1\1\2\11\6\0\1\1\1\0\1\1"+
    "\2\0\1\11\5\0\1\11\3\0\2\11\2\0\1\11"+
    "\21\0\7\1\1\0\1\1\10\0\2\1\1\0\1\11"+
    "\13\0\1\1\5\0\1\11\23\0\1\11\21\0\12\1"+
    "\12\0\1\1\14\0\1\1\1\0\1\1\5\0\2\1"+
    "\2\0\1\1\36\0\1\11\13\1\3\0\1\11\13\0"+
    "\1\1\3\0\1\1\3\0\1\1\1\0\2\1\2\0"+
    "\1\1\30\0\1\11\6\0\12\1\17\0\1\1\4\0"+
    "\1\1\22\0\1\11\13\0\10\1\3\0\1\1\16\0"+
    "\1\1\3\0\1\11\13\0\1\1\2\0\5\1\20\0"+
    "\1\1\2\0\1\1\1\0\1\1\13\0\1\11\2\0"+
    "\1\1\23\0\1\1\4\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[516];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public CssLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CssLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 40: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 41: break;
          case 3:
            { return PARENTHESES_OPEN;
            }
          // fall through
          case 42: break;
          case 4:
            { return PARENTHESES_CLOSE;
            }
          // fall through
          case 43: break;
          case 5:
            { return OP_MULTI;
            }
          // fall through
          case 44: break;
          case 6:
            { return OP_PLUS;
            }
          // fall through
          case 45: break;
          case 7:
            { return COMMA;
            }
          // fall through
          case 46: break;
          case 8:
            { return DOT;
            }
          // fall through
          case 47: break;
          case 9:
            { return OP_DIVIDE;
            }
          // fall through
          case 48: break;
          case 10:
            { return NUMBER;
            }
          // fall through
          case 49: break;
          case 11:
            { return COLON;
            }
          // fall through
          case 50: break;
          case 12:
            { return SEMI_COLON;
            }
          // fall through
          case 51: break;
          case 13:
            { return OP_EQUALS;
            }
          // fall through
          case 52: break;
          case 14:
            { return GREATER_THAN;
            }
          // fall through
          case 53: break;
          case 15:
            { return SQUARE_BRACKET_OPEN;
            }
          // fall through
          case 54: break;
          case 16:
            { return SQUARE_BRACKET_CLOSE;
            }
          // fall through
          case 55: break;
          case 17:
            { return IDENT;
            }
          // fall through
          case 56: break;
          case 18:
            { return BRACKET_OPEN;
            }
          // fall through
          case 57: break;
          case 19:
            { return BRACKET_CLOSE;
            }
          // fall through
          case 58: break;
          case 20:
            { return STRING;
            }
          // fall through
          case 59: break;
          case 21:
            { return HASH;
            }
          // fall through
          case 60: break;
          case 22:
            { return PERCENTAGE;
            }
          // fall through
          case 61: break;
          case 23:
            { return TIME;
            }
          // fall through
          case 62: break;
          case 24:
            { return DASHMATCH;
            }
          // fall through
          case 63: break;
          case 25:
            { return INCLUDES;
            }
          // fall through
          case 64: break;
          case 26:
            { return CDC;
            }
          // fall through
          case 65: break;
          case 27:
            { return LENGTH;
            }
          // fall through
          case 66: break;
          case 28:
            { return EMS;
            }
          // fall through
          case 67: break;
          case 29:
            { return EXS;
            }
          // fall through
          case 68: break;
          case 30:
            { return FREQ;
            }
          // fall through
          case 69: break;
          case 31:
            { return COMMENT;
            }
          // fall through
          case 70: break;
          case 32:
            { return ANGLE;
            }
          // fall through
          case 71: break;
          case 33:
            { return CDO;
            }
          // fall through
          case 72: break;
          case 34:
            { return PAGE_SYM;
            }
          // fall through
          case 73: break;
          case 35:
            { return URI;
            }
          // fall through
          case 74: break;
          case 36:
            { return MEDIA_SYM;
            }
          // fall through
          case 75: break;
          case 37:
            { return IMPORT_SYM;
            }
          // fall through
          case 76: break;
          case 38:
            { return CHARSET_SYM;
            }
          // fall through
          case 77: break;
          case 39:
            { return IMPORTANT_SYM;
            }
          // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
