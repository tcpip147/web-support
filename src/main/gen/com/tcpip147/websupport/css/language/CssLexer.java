// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: CssLexer.flex

package com.tcpip147.websupport.css.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.tcpip147.websupport.css.language.psi.CssTypes.*;


public class CssLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\4\1\7\1\4\1\10\1\11\1\0"+
    "\2\4\1\12\1\13\2\4\12\14\1\15\1\4\1\16"+
    "\1\17\1\20\1\4\1\21\1\22\1\4\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\4\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\4\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\2\4\1\50\2\4"+
    "\1\51\1\4\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\2\4\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\3\4\1\100\2\4\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\13\1\4\0\1\5"+
    "\15\0\1\3\12\0\1\6\1\0\1\7\1\0\1\10"+
    "\6\0\1\5\1\11\1\12\11\0\1\13\1\0\1\14"+
    "\7\0\1\15\15\0\1\16\4\0\1\10\1\0\1\4"+
    "\1\13\3\0\1\4\7\0\1\5\1\4\11\0\1\4"+
    "\1\17\1\0\1\13\3\0\1\4\22\0\1\20\1\21"+
    "\3\0\1\22\7\0\1\13\11\0\1\13\5\0\1\23"+
    "\2\0\1\17\11\0\1\4\20\0\1\24\34\0\1\25"+
    "\1\26\6\0\1\27\6\0\1\10\12\0\1\30\1\24"+
    "\21\0\1\31\4\0\1\32\1\33\10\0\1\10\3\0"+
    "\1\24\10\0\1\24\22\0\1\34\4\0\1\35\3\0"+
    "\1\10\22\0\1\36\14\0\1\37\2\0\2\10\24\0"+
    "\1\40\1\41\4\0\1\42\1\43\2\0\1\10\17\0"+
    "\2\41\3\0\1\44\1\0\1\45\1\10\5\0\1\41"+
    "\3\0\1\41\2\0\1\41\4\0\2\10\2\0\1\41"+
    "\1\0\1\41\6\0\1\10\3\0\1\46\5\0\1\10"+
    "\7\0\2\10\1\0\1\47\5\0\1\10\13\0\1\50"+
    "\23\0\1\51\1\0\1\52\24\0\1\53\32\0\1\54"+
    "\1\0\1\13\21\0\2\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[591];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\101\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6"+
    "\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\101\0\u0b2c\0\101"+
    "\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34"+
    "\0\u0d75\0\u0c30\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb"+
    "\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u0c30\0\u10c2"+
    "\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\101\0\u1289"+
    "\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u1554\0\u1595\0\101\0\u15d6\0\u1617\0\u1658"+
    "\0\u1699\0\u16da\0\u171b\0\u0c30\0\u0fff\0\u175c\0\u179d\0\u17de"+
    "\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6"+
    "\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee"+
    "\0\u1c2f\0\u1c70\0\u1cb1\0\u0efb\0\u0eba\0\u1cf2\0\u1cf2\0\u1d33"+
    "\0\u1d74\0\u1db5\0\u1040\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102"+
    "\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\101\0\101\0\u2288"+
    "\0\u22c9\0\u230a\0\101\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f"+
    "\0\u2490\0\u24d1\0\u2490\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616"+
    "\0\u2657\0\u2698\0\u26d9\0\u271a\0\u271a\0\u275b\0\u279c\0\u27dd"+
    "\0\u281e\0\u285f\0\u0451\0\u28a0\0\u28e1\0\u1cf2\0\u2922\0\u2963"+
    "\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u1fbd"+
    "\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32"+
    "\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a"+
    "\0\u17de\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101"+
    "\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309"+
    "\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511"+
    "\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\u0451\0\u0451\0\u3697"+
    "\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\101\0\u381d\0\u385e"+
    "\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66"+
    "\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u0451"+
    "\0\u31c4\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4"+
    "\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc"+
    "\0\u403d\0\u407e\0\u0451\0\u40bf\0\u4100\0\u4141\0\u4182\0\101"+
    "\0\101\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349"+
    "\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u2fbc\0\u44cf\0\u4510"+
    "\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696\0\u3caf\0\u46d7"+
    "\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e\0\u48df"+
    "\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7"+
    "\0\u4b28\0\101\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\101\0\u4c6d"+
    "\0\u4cae\0\u4cef\0\u4d30\0\u4d71\0\u4db2\0\u4df3\0\u4e34\0\u4e75"+
    "\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u4fba\0\u4ffb\0\u503c\0\u507d"+
    "\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u0451\0\u5203\0\u5244"+
    "\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b\0\u544c"+
    "\0\u548d\0\u54ce\0\101\0\u550f\0\u5550\0\u5591\0\u55d2\0\u5613"+
    "\0\u5654\0\u5695\0\u56d6\0\u5717\0\u5758\0\u5799\0\u57da\0\u581b"+
    "\0\u585c\0\u589d\0\u58de\0\u591f\0\u5960\0\u59a1\0\u59e2\0\u5a23"+
    "\0\u5a64\0\u5aa5\0\u5ae6\0\u0451\0\u0451\0\u5b27\0\u5b68\0\u5ba9"+
    "\0\u5bea\0\101\0\101\0\u5c2b\0\u5c6c\0\u5cad\0\u5cee\0\u5d2f"+
    "\0\u5d70\0\u5db1\0\u5df2\0\u5e33\0\u5e74\0\u5eb5\0\u5ef6\0\u5f37"+
    "\0\u5f78\0\u5fb9\0\u5ffa\0\u603b\0\u607c\0\u0eba\0\u0fff\0\u60bd"+
    "\0\u60fe\0\u613f\0\101\0\u6180\0\101\0\u61c1\0\u6202\0\u6243"+
    "\0\u6284\0\u62c5\0\u6306\0\u175c\0\u6347\0\u6388\0\u63c9\0\u19a5"+
    "\0\u640a\0\u644b\0\u1cf2\0\u648c\0\u64cd\0\u650e\0\u654f\0\u6590"+
    "\0\u65d1\0\u6612\0\u6653\0\u2490\0\u6694\0\u26d9\0\u66d5\0\u6716"+
    "\0\u6757\0\u6798\0\u67d9\0\u681a\0\u685b\0\u689c\0\u68dd\0\u691e"+
    "\0\u695f\0\u69a0\0\u69e1\0\u6a22\0\u6a63\0\u6aa4\0\u6ae5\0\u6b26"+
    "\0\u6b67\0\u6ba8\0\u6be9\0\u6c2a\0\u6c6b\0\u6cac\0\u6ced\0\u6d2e"+
    "\0\u6d6f\0\u6db0\0\u6df1\0\u6e32\0\u6e73\0\u6eb4\0\u6ef5\0\101"+
    "\0\u6f36\0\u6f77\0\u6fb8\0\u6ff9\0\u703a\0\u707b\0\u70bc\0\u70fd"+
    "\0\u713e\0\u717f\0\u71c0\0\101\0\u7201\0\u7242\0\u7283\0\u72c4"+
    "\0\u7305\0\u7346\0\u7387\0\u73c8\0\u7409\0\u744a\0\u748b\0\u74cc"+
    "\0\u750d\0\u754e\0\u758f\0\u75d0\0\u7611\0\u7652\0\u7693\0\101"+
    "\0\u76d4\0\101\0\u7715\0\u7756\0\u7797\0\u77d8\0\u7819\0\u785a"+
    "\0\u789b\0\u78dc\0\u791d\0\u795e\0\u799f\0\u79e0\0\u7a21\0\u7a62"+
    "\0\u7aa3\0\u7ae4\0\u7b25\0\u7b66\0\u7ba7\0\u7be8\0\101\0\u7c29"+
    "\0\u7c6a\0\u7cab\0\u7cec\0\u7d2d\0\u7d6e\0\u7daf\0\u7df0\0\u7e31"+
    "\0\u7e72\0\u7eb3\0\u7ef4\0\u7f35\0\u7f76\0\u7fb7\0\u7ff8\0\u8039"+
    "\0\u807a\0\u80bb\0\u80fc\0\u813d\0\u817e\0\u81bf\0\u8200\0\u8241"+
    "\0\u8282\0\101\0\u82c3\0\u8304\0\u8304\0\u8345\0\u8386\0\u83c7"+
    "\0\u8408\0\u8449\0\u848a\0\u84cb\0\u850c\0\u854d\0\u858e\0\u85cf"+
    "\0\u8610\0\u8651\0\u8692\0\u86d3\0\u8714\0\u0451\0\u0fff";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[591];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\5\2\1\4\3\2\1\5\2\2\1\6"+
    "\2\2\1\7\3\2\1\10\2\2\1\11\1\2\1\12"+
    "\1\2\1\13\1\14\1\2\1\15\1\2\1\16\1\17"+
    "\30\2\1\20\3\2\1\20\102\0\2\3\76\0\2\21"+
    "\2\22\1\21\1\23\1\24\1\21\1\25\1\21\1\26"+
    "\1\27\1\21\1\30\1\31\1\32\1\33\1\34\7\21"+
    "\1\35\22\21\1\36\12\21\1\37\4\21\1\40\1\41"+
    "\3\21\10\0\1\42\3\0\1\5\74\0\1\43\125\0"+
    "\1\44\27\0\1\45\5\0\1\46\45\0\1\47\30\0"+
    "\1\50\64\0\1\51\101\0\1\52\60\0\1\53\35\0"+
    "\1\54\41\0\1\55\2\0\1\56\116\0\1\57\60\0"+
    "\1\60\23\0\1\61\26\0\1\62\27\0\1\63\50\0"+
    "\1\62\70\0\10\22\1\64\6\22\1\65\11\22\1\66"+
    "\66\22\1\65\11\22\1\66\57\22\1\67\6\22\1\65"+
    "\11\22\1\66\57\22\1\70\6\22\1\65\11\22\1\66"+
    "\57\22\1\71\6\22\1\65\71\22\1\72\6\22\1\65"+
    "\11\22\1\66\57\22\1\73\2\22\1\74\3\22\1\65"+
    "\11\22\1\66\3\22\1\75\53\22\1\76\6\22\1\65"+
    "\11\22\1\66\47\22\10\77\1\100\2\77\1\101\3\77"+
    "\1\102\11\77\1\103\47\77\10\104\1\105\20\104\1\106"+
    "\47\104\10\22\1\107\6\22\1\65\11\22\1\66\57\22"+
    "\1\64\6\22\1\65\11\22\1\66\22\22\1\110\34\22"+
    "\1\64\6\22\1\65\11\22\1\66\2\22\1\111\54\22"+
    "\1\64\6\22\1\65\11\22\1\66\20\22\1\112\36\22"+
    "\1\64\6\22\1\65\11\22\1\66\37\22\1\113\17\22"+
    "\1\64\6\22\1\65\11\22\1\66\37\22\1\114\17\22"+
    "\1\64\6\22\1\65\11\22\1\66\20\22\1\115\26\22"+
    "\2\116\2\0\75\116\24\0\1\117\134\0\1\120\43\0"+
    "\1\121\2\0\1\122\2\0\1\123\2\0\1\124\1\125"+
    "\1\0\1\126\1\0\1\127\2\0\1\130\72\0\1\131"+
    "\120\0\1\132\100\0\1\133\107\0\1\134\55\0\1\135"+
    "\122\0\1\136\47\0\1\137\137\0\1\140\72\0\1\141"+
    "\24\0\1\142\123\0\1\143\45\0\14\22\1\144\2\22"+
    "\1\65\11\22\1\66\47\22\10\104\1\145\20\104\1\106"+
    "\47\104\17\22\1\65\11\22\1\66\2\22\1\111\44\22"+
    "\2\146\1\147\2\146\1\147\2\146\1\150\3\146\1\151"+
    "\2\146\1\152\5\146\1\153\3\146\1\154\3\146\1\155"+
    "\12\146\1\147\30\146\14\22\1\144\2\22\1\65\11\22"+
    "\1\66\3\22\1\156\43\22\2\157\1\160\5\157\1\161"+
    "\3\157\1\162\2\157\1\163\5\157\1\164\3\157\1\165"+
    "\3\157\1\166\12\157\1\160\30\157\14\22\1\144\2\22"+
    "\1\65\11\22\1\66\3\22\1\75\53\22\1\167\6\22"+
    "\1\65\1\170\10\22\1\66\66\22\1\65\11\22\1\66"+
    "\32\22\1\171\30\22\1\144\2\22\1\65\11\22\1\66"+
    "\3\22\1\172\43\22\13\77\1\173\3\77\1\102\11\77"+
    "\1\103\62\77\1\173\1\174\2\77\1\102\11\77\1\103"+
    "\57\77\1\175\6\77\1\102\11\77\1\103\47\77\10\176"+
    "\1\177\2\176\1\200\15\176\1\201\47\176\13\77\1\173"+
    "\3\77\1\102\11\77\1\103\2\77\1\202\44\77\31\104"+
    "\1\106\63\104\1\203\14\104\1\106\100\104\1\106\2\104"+
    "\1\204\44\104\17\22\1\65\11\22\1\66\27\22\1\205"+
    "\36\22\1\65\11\22\1\66\5\22\1\206\60\22\1\65"+
    "\11\22\1\66\31\22\1\207\34\22\1\65\11\22\1\66"+
    "\34\22\1\210\31\22\1\65\11\22\1\66\31\22\1\211"+
    "\34\22\1\65\11\22\1\66\37\22\1\212\7\22\10\0"+
    "\1\213\153\0\1\141\53\0\1\214\100\0\1\215\76\0"+
    "\1\216\20\0\1\217\50\0\1\220\75\0\1\221\100\0"+
    "\1\222\121\0\1\223\66\0\1\224\24\0\1\225\56\0"+
    "\1\226\134\0\1\227\75\0\1\230\73\0\1\231\73\0"+
    "\1\232\74\0\1\233\117\0\1\234\70\0\1\227\32\0"+
    "\1\142\17\0\1\235\60\0\1\236\70\0\2\146\1\147"+
    "\2\146\1\147\11\146\1\152\11\146\1\154\16\146\1\147"+
    "\32\146\1\147\2\146\1\147\2\146\1\150\6\146\1\152"+
    "\5\146\1\153\3\146\1\154\3\146\1\155\12\146\1\147"+
    "\32\146\1\147\2\146\1\237\11\146\1\152\11\146\1\154"+
    "\16\146\1\240\32\146\1\147\2\146\1\147\6\146\1\151"+
    "\2\146\1\152\11\146\1\154\16\146\1\147\30\146\2\241"+
    "\1\242\2\241\1\242\2\241\1\243\20\241\1\244\16\241"+
    "\1\242\30\241\2\146\1\147\2\146\1\147\11\146\1\152"+
    "\11\146\1\154\16\146\1\147\21\146\1\245\10\146\1\147"+
    "\2\146\1\147\11\146\1\152\11\146\1\154\2\146\1\246"+
    "\13\146\1\147\32\146\1\147\2\146\1\147\11\146\1\152"+
    "\11\146\1\154\16\146\1\147\15\146\1\247\12\146\17\22"+
    "\1\65\11\22\1\66\20\22\1\250\26\22\2\157\1\160"+
    "\5\157\1\160\6\157\1\163\11\157\1\165\16\157\1\160"+
    "\32\157\1\160\5\157\1\251\6\157\1\163\5\157\1\164"+
    "\3\157\1\165\3\157\1\166\12\157\1\160\32\157\1\160"+
    "\5\157\1\161\6\157\1\163\5\157\1\164\3\157\1\165"+
    "\3\157\1\166\12\157\1\252\32\157\1\160\5\157\1\160"+
    "\3\157\1\162\2\157\1\163\11\157\1\165\16\157\1\160"+
    "\30\157\2\253\1\254\5\253\1\255\20\253\1\256\16\253"+
    "\1\254\30\253\2\157\1\160\5\157\1\160\6\157\1\163"+
    "\11\157\1\165\16\157\1\160\21\157\1\257\10\157\1\160"+
    "\5\157\1\160\6\157\1\163\11\157\1\165\2\157\1\260"+
    "\13\157\1\160\32\157\1\160\5\157\1\160\6\157\1\163"+
    "\11\157\1\165\16\157\1\160\15\157\1\261\12\157\17\22"+
    "\1\65\11\22\1\66\3\22\1\262\53\22\1\263\6\22"+
    "\1\65\11\22\1\66\66\22\1\65\11\22\1\66\40\22"+
    "\1\264\25\22\1\65\11\22\1\66\4\22\1\265\42\22"+
    "\10\77\1\175\2\77\1\173\3\77\1\102\11\77\1\103"+
    "\47\77\13\176\1\200\15\176\1\201\57\176\1\266\2\176"+
    "\1\200\15\176\1\201\62\176\1\200\15\176\1\201\2\176"+
    "\1\267\44\176\13\77\1\173\3\77\1\102\11\77\1\103"+
    "\5\77\1\270\41\77\31\104\1\106\5\104\1\271\41\104"+
    "\17\22\1\65\11\22\1\66\20\22\1\272\45\22\1\65"+
    "\11\22\1\66\4\22\1\273\61\22\1\65\11\22\1\66"+
    "\22\22\1\274\43\22\1\65\11\22\1\66\26\22\1\275"+
    "\31\22\1\276\5\22\1\65\11\22\1\66\60\22\1\277"+
    "\5\22\1\65\11\22\1\66\47\22\14\0\1\300\127\0"+
    "\1\301\72\0\1\302\102\0\1\303\117\0\1\304\46\0"+
    "\1\305\110\0\1\306\73\0\1\307\110\0\1\310\66\0"+
    "\1\311\140\0\1\312\106\0\1\313\100\0\1\314\63\0"+
    "\1\315\105\0\1\316\73\0\1\317\32\0\1\320\70\0"+
    "\2\146\1\147\2\146\1\147\2\146\1\321\6\146\1\152"+
    "\5\146\1\153\3\146\1\154\3\146\1\155\12\146\1\147"+
    "\32\146\1\147\2\146\1\147\2\146\1\322\6\146\1\152"+
    "\5\146\1\153\3\146\1\154\3\146\1\155\12\146\1\147"+
    "\30\146\2\241\1\242\2\241\1\242\23\241\1\244\16\241"+
    "\1\242\32\241\1\242\2\241\1\242\2\241\1\323\14\241"+
    "\1\324\3\241\1\244\3\241\1\325\12\241\1\242\32\241"+
    "\1\242\2\241\1\242\23\241\1\244\2\241\1\326\13\241"+
    "\1\242\30\241\2\146\1\147\2\146\1\147\11\146\1\152"+
    "\11\146\1\154\16\146\1\147\3\146\1\327\26\146\1\147"+
    "\2\146\1\147\11\146\1\152\11\146\1\154\5\146\1\330"+
    "\10\146\1\147\32\146\1\147\2\146\1\147\11\146\1\152"+
    "\11\146\1\154\16\146\1\147\14\146\1\331\13\146\17\22"+
    "\1\65\11\22\1\66\32\22\1\332\14\22\2\157\1\160"+
    "\5\157\1\333\6\157\1\163\5\157\1\164\3\157\1\165"+
    "\3\157\1\166\12\157\1\252\32\157\1\160\5\157\1\334"+
    "\6\157\1\163\5\157\1\164\3\157\1\165\3\157\1\166"+
    "\12\157\1\160\30\157\2\253\1\254\5\253\1\254\20\253"+
    "\1\256\16\253\1\254\32\253\1\254\5\253\1\335\14\253"+
    "\1\336\3\253\1\256\3\253\1\337\12\253\1\254\32\253"+
    "\1\254\5\253\1\254\20\253\1\256\2\253\1\340\13\253"+
    "\1\254\30\253\2\157\1\160\5\157\1\160\6\157\1\163"+
    "\11\157\1\165\16\157\1\160\3\157\1\341\26\157\1\160"+
    "\5\157\1\160\6\157\1\163\11\157\1\165\5\157\1\342"+
    "\10\157\1\160\32\157\1\160\5\157\1\160\6\157\1\163"+
    "\11\157\1\165\16\157\1\160\14\157\1\343\13\157\17\22"+
    "\1\65\11\22\1\66\32\22\1\344\33\22\1\65\11\22"+
    "\1\66\41\22\1\345\24\22\1\65\11\22\1\66\10\22"+
    "\1\346\36\22\13\176\1\200\15\176\1\201\5\176\1\347"+
    "\41\176\13\77\1\173\3\77\1\102\11\77\1\103\4\77"+
    "\1\350\42\77\31\104\1\106\4\104\1\351\42\104\17\22"+
    "\1\65\11\22\1\66\37\22\1\352\26\22\1\65\11\22"+
    "\1\66\6\22\1\353\51\22\1\354\5\22\1\65\11\22"+
    "\1\66\66\22\1\65\11\22\1\66\30\22\1\355\26\22"+
    "\1\356\6\22\1\65\11\22\1\66\57\22\1\357\6\22"+
    "\1\65\11\22\1\66\47\22\35\0\1\360\105\0\1\361"+
    "\74\0\1\362\127\0\1\363\44\0\1\364\74\0\1\365"+
    "\100\0\1\366\112\0\1\367\106\0\1\370\110\0\1\371"+
    "\33\0\1\372\151\0\1\227\110\0\1\373\103\0\1\374"+
    "\103\0\1\375\46\0\1\376\33\0\2\146\1\147\2\146"+
    "\1\237\11\146\1\152\11\146\1\154\3\146\1\377\12\146"+
    "\1\240\30\146\2\241\1\242\2\241\1\u0100\23\241\1\244"+
    "\16\241\1\u0101\32\241\1\242\2\241\1\242\23\241\1\244"+
    "\16\241\1\242\21\241\1\u0102\10\241\1\242\2\241\1\242"+
    "\23\241\1\244\16\241\1\242\15\241\1\u0103\14\241\1\242"+
    "\2\241\1\242\23\241\1\244\5\241\1\u0104\10\241\1\242"+
    "\30\241\2\146\1\147\2\146\1\147\11\146\1\152\11\146"+
    "\1\154\16\146\1\147\1\146\1\u0105\30\146\1\147\2\146"+
    "\1\147\11\146\1\152\11\146\1\154\4\146\1\u0106\11\146"+
    "\1\147\32\146\1\147\2\146\1\147\11\146\1\152\11\146"+
    "\1\154\16\146\1\147\1\146\1\u0107\26\146\17\22\1\65"+
    "\11\22\1\66\24\22\1\u0108\22\22\2\157\1\160\5\157"+
    "\1\u0109\6\157\1\163\5\157\1\164\3\157\1\165\3\157"+
    "\1\166\12\157\1\252\32\157\1\160\5\157\1\333\6\157"+
    "\1\163\5\157\1\164\3\157\1\165\3\157\1\u010a\12\157"+
    "\1\252\30\157\2\253\1\254\5\253\1\u010b\14\253\1\336"+
    "\3\253\1\256\3\253\1\337\12\253\1\u010c\32\253\1\254"+
    "\5\253\1\254\20\253\1\256\16\253\1\254\21\253\1\u010d"+
    "\10\253\1\254\5\253\1\254\20\253\1\256\16\253\1\254"+
    "\15\253\1\u010e\14\253\1\254\5\253\1\254\20\253\1\256"+
    "\5\253\1\u010f\10\253\1\254\30\253\2\157\1\160\5\157"+
    "\1\160\6\157\1\163\11\157\1\165\16\157\1\160\1\157"+
    "\1\u0110\30\157\1\160\5\157\1\160\6\157\1\163\11\157"+
    "\1\165\4\157\1\u0111\11\157\1\160\32\157\1\160\5\157"+
    "\1\160\6\157\1\163\11\157\1\165\16\157\1\160\1\157"+
    "\1\u0112\26\157\17\22\1\65\11\22\1\66\40\22\1\u0113"+
    "\25\22\1\65\11\22\1\66\20\22\1\u0114\36\22\1\u0115"+
    "\6\22\1\65\11\22\1\66\47\22\13\176\1\200\15\176"+
    "\1\201\4\176\1\u0116\42\176\13\77\1\173\3\77\1\102"+
    "\11\77\1\103\6\77\1\u0117\40\77\31\104\1\106\6\104"+
    "\1\u0118\40\104\17\22\1\65\11\22\1\66\40\22\1\u0119"+
    "\25\22\1\65\11\22\1\66\10\22\1\u011a\46\22\1\u011b"+
    "\6\22\1\65\11\22\1\66\66\22\1\65\11\22\1\66"+
    "\23\22\1\u011c\23\22\42\0\1\u011d\62\0\1\u011e\114\0"+
    "\1\u011f\133\0\1\u0120\27\0\1\u0121\117\0\1\u0122\75\0"+
    "\1\u0123\101\0\1\u0124\127\0\1\u0125\23\0\1\u0126\77\0"+
    "\1\u0127\20\0\1\u0128\142\0\1\u0129\15\0\1\u012a\17\0"+
    "\1\u012b\131\0\1\u012c\17\0\2\146\1\147\2\146\1\147"+
    "\11\146\1\152\11\146\1\154\16\146\1\147\5\146\1\u012d"+
    "\22\146\2\241\1\242\2\241\1\242\2\241\1\u012e\14\241"+
    "\1\324\3\241\1\244\3\241\1\325\12\241\1\242\32\241"+
    "\1\242\2\241\1\242\2\241\1\u012f\14\241\1\324\3\241"+
    "\1\244\3\241\1\325\12\241\1\242\32\241\1\242\2\241"+
    "\1\242\23\241\1\244\16\241\1\242\3\241\1\u0130\26\241"+
    "\1\242\2\241\1\242\23\241\1\244\16\241\1\242\14\241"+
    "\1\u0131\15\241\1\242\2\241\1\242\23\241\1\244\4\241"+
    "\1\u0132\11\241\1\242\30\241\2\146\1\147\2\146\1\147"+
    "\11\146\1\152\11\146\1\154\16\146\1\147\16\146\1\u0133"+
    "\13\146\1\147\2\146\1\147\11\146\1\152\11\146\1\154"+
    "\6\146\1\u0134\7\146\1\147\32\146\1\147\2\146\1\147"+
    "\11\146\1\152\11\146\1\154\16\146\1\147\21\146\1\u0135"+
    "\6\146\2\157\1\160\5\157\1\160\6\157\1\163\11\157"+
    "\1\165\16\157\1\160\5\157\1\u0136\7\157\1\261\12\157"+
    "\2\253\1\254\5\253\1\u0137\14\253\1\336\3\253\1\256"+
    "\3\253\1\337\12\253\1\u010c\32\253\1\254\5\253\1\u0138"+
    "\14\253\1\336\3\253\1\256\3\253\1\337\12\253\1\254"+
    "\32\253\1\254\5\253\1\254\20\253\1\256\16\253\1\254"+
    "\3\253\1\u0139\26\253\1\254\5\253\1\254\20\253\1\256"+
    "\16\253\1\254\14\253\1\u013a\15\253\1\254\5\253\1\254"+
    "\20\253\1\256\4\253\1\u013b\11\253\1\254\30\253\2\157"+
    "\1\160\5\157\1\160\6\157\1\163\11\157\1\165\16\157"+
    "\1\160\16\157\1\u013c\13\157\1\160\5\157\1\160\6\157"+
    "\1\163\11\157\1\165\6\157\1\u013d\7\157\1\160\32\157"+
    "\1\160\5\157\1\160\6\157\1\163\11\157\1\165\16\157"+
    "\1\160\21\157\1\u013e\6\157\17\22\1\65\11\22\1\66"+
    "\41\22\1\u013f\24\22\1\65\11\22\1\66\37\22\1\u0140"+
    "\20\22\1\u0141\5\22\1\65\11\22\1\66\47\22\13\176"+
    "\1\200\15\176\1\201\6\176\1\u0142\40\176\13\77\1\173"+
    "\3\77\1\102\11\77\1\103\10\77\1\u0143\36\77\31\104"+
    "\1\106\10\104\1\u0144\36\104\17\22\1\65\11\22\1\66"+
    "\24\22\1\u0145\41\22\1\65\2\22\1\u0146\6\22\1\66"+
    "\64\22\1\u0147\1\22\1\65\11\22\1\66\47\22\25\0"+
    "\1\u0148\125\0\1\u0149\70\0\1\u014a\75\0\1\u014b\101\0"+
    "\1\u014c\76\0\1\u014d\133\0\1\u014e\17\0\1\u014f\77\0"+
    "\1\u0150\146\0\1\u0151\105\0\1\u0152\26\0\1\u0153\146\0"+
    "\1\u0154\104\0\1\u0155\16\0\2\146\1\147\2\146\1\147"+
    "\11\146\1\152\11\146\1\154\16\146\1\147\25\146\1\u0156"+
    "\2\146\2\241\1\242\2\241\1\u0100\23\241\1\244\3\241"+
    "\1\u0157\12\241\1\u0101\32\241\1\242\2\241\1\242\23\241"+
    "\1\244\16\241\1\242\1\241\1\u0158\30\241\1\242\2\241"+
    "\1\242\23\241\1\244\16\241\1\242\1\241\1\u0159\30\241"+
    "\1\242\2\241\1\242\23\241\1\244\6\241\1\u015a\7\241"+
    "\1\242\30\241\2\146\1\147\2\146\1\147\11\146\1\152"+
    "\11\146\1\154\16\146\1\147\5\146\1\147\24\146\1\147"+
    "\2\146\1\147\11\146\1\152\11\146\1\154\10\146\1\u015b"+
    "\5\146\1\147\32\146\1\147\2\146\1\147\11\146\1\152"+
    "\11\146\1\154\16\146\1\147\3\146\1\u015c\24\146\2\157"+
    "\1\160\5\157\1\160\6\157\1\163\11\157\1\165\16\157"+
    "\1\160\25\157\1\u015d\2\157\2\253\1\254\5\253\1\u010b"+
    "\14\253\1\336\3\253\1\256\3\253\1\u015e\12\253\1\u010c"+
    "\32\253\1\254\5\253\1\254\20\253\1\256\16\253\1\254"+
    "\1\253\1\u015f\30\253\1\254\5\253\1\254\20\253\1\256"+
    "\16\253\1\254\1\253\1\u0160\30\253\1\254\5\253\1\254"+
    "\20\253\1\256\6\253\1\u0161\7\253\1\254\30\253\2\157"+
    "\1\160\5\157\1\160\6\157\1\163\11\157\1\165\16\157"+
    "\1\160\5\157\1\160\24\157\1\160\5\157\1\160\6\157"+
    "\1\163\11\157\1\165\10\157\1\u0162\5\157\1\160\32\157"+
    "\1\160\5\157\1\160\6\157\1\163\11\157\1\165\16\157"+
    "\1\160\3\157\1\u0163\24\157\17\22\1\65\11\22\1\66"+
    "\20\22\1\u0164\45\22\1\65\11\22\1\66\41\22\1\u0165"+
    "\15\22\1\u0166\6\22\1\65\11\22\1\66\47\22\13\176"+
    "\1\200\15\176\1\201\10\176\1\u0167\36\176\13\77\1\173"+
    "\3\77\1\102\2\77\1\u0168\6\77\1\103\47\77\22\104"+
    "\1\u0169\6\104\1\106\47\104\17\22\1\65\11\22\1\66"+
    "\41\22\1\u016a\24\22\1\65\11\22\1\66\3\22\1\u016b"+
    "\62\22\1\65\4\22\1\u016c\4\22\1\66\47\22\40\0"+
    "\1\u016d\132\0\1\u016e\30\0\1\u016f\120\0\1\u0170\76\0"+
    "\1\u0171\77\0\1\u0172\51\0\1\u0173\146\0\1\u0174\110\0"+
    "\1\u0175\22\0\1\u0176\167\0\1\u0177\74\0\1\u0178\5\0"+
    "\2\146\1\147\2\146\1\147\11\146\1\152\11\146\1\154"+
    "\16\146\1\147\12\146\1\u0179\15\146\2\241\1\242\2\241"+
    "\1\242\23\241\1\244\16\241\1\242\5\241\1\u017a\24\241"+
    "\1\242\2\241\1\242\23\241\1\244\16\241\1\242\16\241"+
    "\1\u017b\13\241\1\242\2\241\1\242\23\241\1\244\16\241"+
    "\1\242\21\241\1\u017c\10\241\1\242\2\241\1\242\23\241"+
    "\1\244\10\241\1\u017d\5\241\1\242\30\241\2\146\1\147"+
    "\2\146\1\147\11\146\1\152\2\146\1\u017e\6\146\1\154"+
    "\16\146\1\147\32\146\1\147\2\146\1\147\11\146\1\152"+
    "\11\146\1\154\16\146\1\147\11\146\1\u017f\16\146\2\157"+
    "\1\160\5\157\1\160\6\157\1\163\11\157\1\165\16\157"+
    "\1\160\12\157\1\u0180\15\157\2\253\1\254\5\253\1\254"+
    "\20\253\1\256\16\253\1\254\5\253\1\u0181\7\253\1\u010e"+
    "\14\253\1\254\5\253\1\254\20\253\1\256\16\253\1\254"+
    "\16\253\1\u0182\13\253\1\254\5\253\1\254\20\253\1\256"+
    "\16\253\1\254\21\253\1\u0183\10\253\1\254\5\253\1\254"+
    "\20\253\1\256\10\253\1\u0184\5\253\1\254\30\253\2\157"+
    "\1\160\5\157\1\160\6\157\1\163\2\157\1\u0185\6\157"+
    "\1\165\16\157\1\160\32\157\1\160\5\157\1\160\6\157"+
    "\1\163\11\157\1\165\16\157\1\160\11\157\1\u0186\16\157"+
    "\17\22\1\65\11\22\1\66\37\22\1\u0187\26\22\1\65"+
    "\11\22\1\66\3\22\1\u0188\43\22\13\176\1\200\6\176"+
    "\1\u0189\6\176\1\201\47\176\13\77\1\173\3\77\1\102"+
    "\11\77\1\103\3\77\1\u018a\43\77\31\104\1\106\3\104"+
    "\1\u018b\43\104\10\22\1\u018c\6\22\1\65\11\22\1\66"+
    "\66\22\1\65\11\22\1\66\10\22\1\u018d\55\22\1\65"+
    "\11\22\1\66\14\22\1\u018e\32\22\24\0\1\u018f\135\0"+
    "\1\u0190\42\0\1\u0191\116\0\1\u0192\101\0\1\u0193\127\0"+
    "\1\u0194\74\0\1\u0195\100\0\1\227\23\0\1\u0196\100\0"+
    "\1\u0176\17\0\1\u0197\126\0\1\u0198\22\0\2\146\1\147"+
    "\2\146\1\147\11\146\1\152\11\146\1\154\16\146\1\147"+
    "\11\146\1\u0199\16\146\2\241\1\242\2\241\1\242\23\241"+
    "\1\244\16\241\1\242\25\241\1\u019a\4\241\1\242\2\241"+
    "\1\242\23\241\1\244\16\241\1\242\5\241\1\242\24\241"+
    "\1\242\2\241\1\242\23\241\1\244\16\241\1\242\3\241"+
    "\1\u019b\26\241\1\242\2\241\1\242\14\241\1\u019c\6\241"+
    "\1\244\16\241\1\242\30\241\2\146\1\147\2\146\1\147"+
    "\11\146\1\152\11\146\1\154\3\146\1\u019d\12\146\1\147"+
    "\32\146\1\147\2\146\1\147\11\146\1\152\11\146\1\154"+
    "\16\146\1\147\11\146\1\147\16\146\2\157\1\160\5\157"+
    "\1\160\6\157\1\163\11\157\1\165\16\157\1\160\11\157"+
    "\1\u019e\16\157\2\253\1\254\5\253\1\254\20\253\1\256"+
    "\16\253\1\254\25\253\1\u019f\4\253\1\254\5\253\1\254"+
    "\20\253\1\256\16\253\1\254\5\253\1\254\24\253\1\254"+
    "\5\253\1\254\20\253\1\256\16\253\1\254\3\253\1\u01a0"+
    "\26\253\1\254\5\253\1\254\11\253\1\u01a1\6\253\1\256"+
    "\16\253\1\254\30\253\2\157\1\160\5\157\1\160\6\157"+
    "\1\163\11\157\1\165\3\157\1\u01a2\12\157\1\160\32\157"+
    "\1\160\5\157\1\160\6\157\1\163\11\157\1\165\16\157"+
    "\1\160\11\157\1\160\16\157\17\22\1\65\11\22\1\66"+
    "\41\22\1\u01a3\24\22\1\65\11\22\1\66\32\22\1\u01a4"+
    "\14\22\13\176\1\200\15\176\1\201\3\176\1\u01a5\43\176"+
    "\13\77\1\173\3\77\1\102\11\77\1\103\10\77\1\u01a6"+
    "\36\77\31\104\1\106\10\104\1\u01a7\36\104\17\22\1\65"+
    "\11\22\1\u01a8\47\22\52\0\1\u01a9\51\0\1\u01aa\102\0"+
    "\1\u01ab\131\0\1\u01ac\115\0\1\u01ad\15\0\1\u01ae\146\0"+
    "\1\u01af\114\0\1\u01b0\6\0\2\146\1\147\2\146\1\147"+
    "\11\146\1\152\11\146\1\154\16\146\1\147\14\146\1\u0133"+
    "\13\146\2\241\1\242\2\241\1\242\23\241\1\244\16\241"+
    "\1\242\12\241\1\u01b1\17\241\1\242\2\241\1\242\23\241"+
    "\1\244\16\241\1\242\11\241\1\u01b2\20\241\1\242\2\241"+
    "\1\242\23\241\1\244\3\241\1\u01b3\12\241\1\242\30\241"+
    "\2\146\1\147\2\146\1\147\11\146\1\152\11\146\1\154"+
    "\10\146\1\u01b4\5\146\1\147\30\146\2\157\1\160\5\157"+
    "\1\160\6\157\1\163\11\157\1\165\16\157\1\160\14\157"+
    "\1\u013c\13\157\2\253\1\254\5\253\1\254\20\253\1\256"+
    "\16\253\1\254\12\253\1\u01b5\17\253\1\254\5\253\1\254"+
    "\20\253\1\256\16\253\1\254\11\253\1\u01b6\20\253\1\254"+
    "\5\253\1\254\20\253\1\256\3\253\1\u01b7\12\253\1\254"+
    "\30\253\2\157\1\160\5\157\1\160\6\157\1\163\11\157"+
    "\1\165\10\157\1\u01b8\5\157\1\160\30\157\17\22\1\65"+
    "\11\22\1\66\3\22\1\u01b9\62\22\1\65\11\22\1\66"+
    "\22\22\1\u01ba\24\22\13\176\1\200\15\176\1\201\10\176"+
    "\1\u01bb\36\176\17\22\1\65\11\22\1\66\2\22\1\111"+
    "\27\22\1\u01bc\14\22\72\0\1\u01bd\67\0\1\u01be\76\0"+
    "\1\u01bf\31\0\1\u01c0\167\0\1\u01c1\70\0\1\u01c2\11\0"+
    "\2\241\1\242\2\241\1\242\23\241\1\244\16\241\1\242"+
    "\11\241\1\u01c3\20\241\1\242\2\241\1\242\23\241\1\244"+
    "\16\241\1\242\11\241\1\242\20\241\1\242\2\241\1\242"+
    "\23\241\1\244\10\241\1\u01c4\5\241\1\242\30\241\2\253"+
    "\1\254\5\253\1\254\20\253\1\256\16\253\1\254\11\253"+
    "\1\u01c5\20\253\1\254\5\253\1\254\20\253\1\256\16\253"+
    "\1\254\11\253\1\254\20\253\1\254\5\253\1\254\20\253"+
    "\1\256\10\253\1\u01c6\5\253\1\254\30\253\17\22\1\65"+
    "\11\22\1\66\32\22\1\u01c7\33\22\1\65\11\22\1\66"+
    "\27\22\1\u01c8\36\22\1\65\11\22\1\66\20\22\1\u01c9"+
    "\26\22\61\0\1\u01ca\71\0\1\u01cb\110\0\1\u01cc\26\0"+
    "\1\u01cd\100\0\1\u01ae\17\0\1\u01ce\122\0\1\u01cf\26\0"+
    "\2\241\1\242\2\241\1\242\23\241\1\244\16\241\1\242"+
    "\14\241\1\u017b\13\241\2\253\1\254\5\253\1\254\20\253"+
    "\1\256\16\253\1\254\14\253\1\u0182\13\253\17\22\1\65"+
    "\11\22\1\66\22\22\1\u01d0\43\22\1\65\11\22\1\66"+
    "\20\22\1\u01d1\45\22\1\65\11\22\1\66\26\22\1\u01d2"+
    "\20\22\23\0\1\u01d3\146\0\1\u01d4\41\0\1\u01d5\44\0"+
    "\1\u01d6\11\0\1\u01d7\146\0\1\u01d8\76\0\1\u01d9\24\0"+
    "\17\22\1\65\11\22\1\66\27\22\1\u01da\36\22\1\65"+
    "\11\22\1\66\37\22\1\u01d1\26\22\1\65\11\22\1\66"+
    "\24\22\1\u01db\22\22\61\0\1\u01dc\45\0\1\u01dd\77\0"+
    "\1\u01de\105\0\1\u01d5\56\0\1\u01df\167\0\1\u01e0\57\0"+
    "\1\u01e1\22\0\17\22\1\65\11\22\1\66\20\22\1\u01e2"+
    "\45\22\1\65\11\22\1\66\10\22\1\u01e3\36\22\52\0"+
    "\1\u01e4\50\0\1\u01e5\2\0\1\u01e6\122\0\1\u01e7\41\0"+
    "\1\u01e8\100\0\1\u01cd\17\0\1\u01e9\54\0\1\u01e1\1\0"+
    "\2\u01e1\2\0\33\u01e1\1\u01ea\33\u01e1\17\22\1\65\11\22"+
    "\1\66\37\22\1\u01e2\26\22\1\65\11\22\1\66\37\22"+
    "\1\u01eb\7\22\71\0\1\u01ec\32\0\1\u01ed\77\0\1\u01ee"+
    "\104\0\1\u01ef\130\0\1\u01f0\26\0\1\u01e1\1\0\2\u01e1"+
    "\2\0\33\u01e1\1\u01ea\13\u01e1\1\u01f1\17\u01e1\17\22\1\65"+
    "\11\22\1\66\20\22\1\u01f2\26\22\41\0\1\u01f3\64\0"+
    "\1\u01f4\115\0\1\u01f5\76\0\1\u01f6\137\0\1\u01d7\5\0"+
    "\1\u01e1\1\0\2\u01e1\2\0\33\u01e1\1\u01ea\14\u01e1\1\u01f7"+
    "\16\u01e1\17\22\1\65\11\22\1\66\33\22\1\u01f8\13\22"+
    "\42\0\1\u01f9\101\0\1\u01fa\57\0\1\u01fb\62\0\1\u01e1"+
    "\1\0\2\u01e1\2\0\33\u01e1\1\u01ea\25\u01e1\1\u01fc\5\u01e1"+
    "\17\22\1\65\11\22\1\66\40\22\1\u01fd\6\22\47\0"+
    "\1\u01fe\71\0\1\u01ff\74\0\1\u0200\50\0\1\u01e1\1\0"+
    "\2\u01e1\2\0\33\u01e1\1\u01ea\10\u01e1\1\u0201\22\u01e1\17\22"+
    "\1\65\11\22\1\66\25\22\1\u0202\21\22\33\0\1\u0203"+
    "\72\0\1\u0204\100\0\1\u0205\57\0\1\u01e1\1\0\2\u01e1"+
    "\2\0\33\u01e1\1\u01ea\24\u01e1\1\u0206\6\u01e1\17\22\1\65"+
    "\11\22\1\66\34\22\1\u0207\12\22\25\0\1\u0208\77\0"+
    "\1\u0209\115\0\1\u020a\43\0\1\u01e1\1\0\2\u01e1\2\0"+
    "\33\u01e1\1\u01ea\21\u01e1\1\u020b\11\u01e1\17\22\1\65\11\22"+
    "\1\66\37\22\1\u020c\7\22\52\0\1\u020d\32\0\1\u01e1"+
    "\1\0\2\u01e1\2\0\33\u01e1\1\u01ea\4\u01e1\1\u020e\26\u01e1"+
    "\17\22\1\65\11\22\1\66\32\22\1\u020f\14\22\72\0"+
    "\1\u0210\12\0\1\u01e1\1\0\2\u01e1\2\0\33\u01e1\1\u01ea"+
    "\6\u01e1\1\u0211\24\u01e1\2\u0212\2\22\13\u0212\1\u0213\11\u0212"+
    "\1\u0214\47\u0212\61\0\1\u0215\23\0\1\u01e1\1\0\2\u01e1"+
    "\2\0\33\u01e1\1\u01ea\10\u01e1\1\u0216\22\u01e1\17\22\1\65"+
    "\11\22\1\66\2\22\1\u0217\44\22\10\104\1\145\20\104"+
    "\1\106\2\104\1\u0218\44\104\17\22\1\65\11\22\1\66"+
    "\2\22\1\u0219\44\22\23\0\1\u021a\61\0\1\u01e1\1\0"+
    "\2\u01e1\1\u021b\1\0\33\u01e1\1\u01ea\33\u01e1\17\22\1\65"+
    "\11\22\1\66\30\22\1\u021c\16\22\31\104\1\106\30\104"+
    "\1\u021d\16\104\17\22\1\65\11\22\1\66\5\22\1\206"+
    "\22\22\1\u021c\16\22\61\0\1\u021e\27\0\1\u021f\70\0"+
    "\17\22\1\65\11\22\1\66\22\22\1\u0220\24\22\31\104"+
    "\1\106\22\104\1\u0221\24\104\52\0\1\u0222\26\0\17\22"+
    "\1\65\11\22\1\66\37\22\1\u0223\7\22\31\104\1\106"+
    "\37\104\1\u0224\7\104\71\0\1\u0225\7\0\17\22\1\65"+
    "\11\22\1\66\34\22\1\u0226\12\22\31\104\1\106\34\104"+
    "\1\u0227\12\104\44\0\1\u0228\34\0\17\22\1\65\11\22"+
    "\1\66\40\22\1\u0229\6\22\31\104\1\106\40\104\1\u022a"+
    "\6\104\22\0\1\u022b\56\0\17\22\1\65\11\22\1\66"+
    "\34\22\1\u022c\12\22\31\104\1\106\34\104\1\u022d\12\104"+
    "\33\0\1\u022e\45\0\17\22\1\65\11\22\1\66\25\22"+
    "\1\u022f\21\22\31\104\1\106\25\104\1\u0230\21\104\43\0"+
    "\1\u0231\35\0\17\22\1\65\11\22\1\66\41\22\1\u0232"+
    "\5\22\31\104\1\106\41\104\1\u0233\5\104\25\0\1\u0234"+
    "\53\0\2\u0235\2\22\13\u0235\1\u0236\11\u0235\1\u0237\47\u0235"+
    "\2\u0238\2\104\25\u0238\1\u0239\47\u0238\41\0\1\u023a\37\0"+
    "\10\22\1\u023b\6\22\1\65\11\22\1\66\47\22\10\104"+
    "\1\u023c\20\104\1\106\47\104\10\22\1\u023b\6\22\1\65"+
    "\11\22\1\66\2\22\1\111\44\22\10\104\1\u023d\20\104"+
    "\1\106\57\104\1\u023d\20\104\1\106\2\104\1\204\44\104"+
    "\17\22\1\65\6\22\1\u023e\2\22\1\66\47\22\26\104"+
    "\1\u023f\2\104\1\106\47\104\17\22\1\65\11\22\1\66"+
    "\42\22\1\u0240\4\22\31\104\1\106\42\104\1\u0241\4\104"+
    "\17\22\1\65\11\22\1\66\33\22\1\u0242\13\22\31\104"+
    "\1\106\33\104\1\u0243\13\104\17\22\1\65\11\22\1\66"+
    "\22\22\1\u0244\24\22\31\104\1\106\22\104\1\u0245\24\104"+
    "\17\22\1\65\11\22\1\66\41\22\1\u0246\5\22\31\104"+
    "\1\106\41\104\1\u0247\5\104\17\22\1\65\11\22\1\66"+
    "\30\22\1\u0248\16\22\31\104\1\106\30\104\1\u0249\16\104"+
    "\17\22\1\65\11\22\1\66\34\22\1\u024a\12\22\31\104"+
    "\1\106\34\104\1\u024b\12\104\17\22\1\65\11\22\1\66"+
    "\33\22\1\u024c\13\22\31\104\1\106\33\104\1\u024d\13\104"+
    "\17\22\1\65\11\22\1\66\17\22\1\u024e\27\22\31\104"+
    "\1\106\17\104\1\u024f\27\104";

  private static int [] zzUnpacktrans() {
    int [] result = new int[34645];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\4\0\1\1\15\0\1\11\12\0"+
    "\1\11\1\0\1\11\1\0\1\1\6\0\3\1\11\0"+
    "\1\1\1\0\1\1\7\0\1\11\15\0\1\11\4\0"+
    "\1\1\1\0\2\1\3\0\1\1\7\0\2\1\11\0"+
    "\2\1\1\0\1\1\3\0\1\1\22\0\2\11\3\0"+
    "\1\11\7\0\1\1\11\0\1\1\5\0\1\1\2\0"+
    "\1\1\11\0\1\1\20\0\1\1\34\0\2\1\6\0"+
    "\1\11\6\0\1\1\12\0\2\1\21\0\1\1\4\0"+
    "\2\11\10\0\1\1\3\0\1\1\10\0\1\1\22\0"+
    "\1\11\4\0\1\11\3\0\1\1\22\0\1\1\14\0"+
    "\1\11\2\0\2\1\24\0\2\1\4\0\2\11\2\0"+
    "\1\1\17\0\2\1\3\0\1\11\1\0\1\11\1\1"+
    "\5\0\1\1\3\0\1\1\2\0\1\1\4\0\2\1"+
    "\2\0\1\1\1\0\1\1\6\0\1\1\3\0\1\1"+
    "\5\0\1\1\7\0\2\1\1\0\1\1\5\0\1\11"+
    "\13\0\1\11\23\0\1\11\1\0\1\11\24\0\1\11"+
    "\32\0\1\11\1\0\1\1\21\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[591];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public CssLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CssLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 46: break;
          case 2:
            { return SPACE;
            }
          // fall through
          case 47: break;
          case 3:
            { return DASHMATCH;
            }
          // fall through
          case 48: break;
          case 4:
            { return NUMBER;
            }
          // fall through
          case 49: break;
          case 5:
            { return PLUS;
            }
          // fall through
          case 50: break;
          case 6:
            { return OR;
            }
          // fall through
          case 51: break;
          case 7:
            { return TO;
            }
          // fall through
          case 52: break;
          case 8:
            { return UNICODERANGE;
            }
          // fall through
          case 53: break;
          case 9:
            { return COMMA;
            }
          // fall through
          case 54: break;
          case 10:
            { return MINUS;
            }
          // fall through
          case 55: break;
          case 11:
            { return INCLUDES;
            }
          // fall through
          case 56: break;
          case 12:
            { return GREATER;
            }
          // fall through
          case 57: break;
          case 13:
            { return AND;
            }
          // fall through
          case 58: break;
          case 14:
            { return NOT;
            }
          // fall through
          case 59: break;
          case 15:
            { return CDO;
            }
          // fall through
          case 60: break;
          case 16:
            { return FROM;
            }
          // fall through
          case 61: break;
          case 17:
            { return DIMENSION;
            }
          // fall through
          case 62: break;
          case 18:
            { return MEDIAONLY;
            }
          // fall through
          case 63: break;
          case 19:
            { return CDC;
            }
          // fall through
          case 64: break;
          case 20:
            { return STRING_;
            }
          // fall through
          case 65: break;
          case 21:
            { return URL_;
            }
          // fall through
          case 66: break;
          case 22:
            { return VAR;
            }
          // fall through
          case 67: break;
          case 23:
            { return PAGE;
            }
          // fall through
          case 68: break;
          case 24:
            { return HASH;
            }
          // fall through
          case 69: break;
          case 25:
            { return CALC;
            }
          // fall through
          case 70: break;
          case 26:
            { return ATKEYWORD;
            }
          // fall through
          case 71: break;
          case 27:
            { return MEDIA;
            }
          // fall through
          case 72: break;
          case 28:
            { return IMPORTS;
            }
          // fall through
          case 73: break;
          case 29:
            { return FUNCTION_;
            }
          // fall through
          case 74: break;
          case 30:
            { return PSEUDONOT;
            }
          // fall through
          case 75: break;
          case 31:
            { return PERCENTAGE;
            }
          // fall through
          case 76: break;
          case 32:
            { return CHARSET;
            }
          // fall through
          case 77: break;
          case 33:
            { return IMPORTANT;
            }
          // fall through
          case 78: break;
          case 34:
            { return SUPPORTS;
            }
          // fall through
          case 79: break;
          case 35:
            { return VIEWPORT;
            }
          // fall through
          case 80: break;
          case 36:
            { return NAMESPACE;
            }
          // fall through
          case 81: break;
          case 37:
            { return UNKNOWNDIMENSION;
            }
          // fall through
          case 82: break;
          case 38:
            { return IDENT;
            }
          // fall through
          case 83: break;
          case 39:
            { return VARIABLE;
            }
          // fall through
          case 84: break;
          case 40:
            { return FONTFACE;
            }
          // fall through
          case 85: break;
          case 41:
            { return COUNTERSTYLE;
            }
          // fall through
          case 86: break;
          case 42:
            { return KEYFRAMES;
            }
          // fall through
          case 87: break;
          case 43:
            { return URL;
            }
          // fall through
          case 88: break;
          case 44:
            { return FONTFEATUREVALUES;
            }
          // fall through
          case 89: break;
          case 45:
            { return DXIMAGETRANSFORM;
            }
          // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
