{
  parserClass="com.tcpip147.websupport.css.language.CssParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Css"
  psiImplClassSuffix="Impl"
  psiPackage="com.tcpip147.websupport.css.language.psi"
  psiImplPackage="com.tcpip147.websupport.css.language.psi.impl"

  elementTypeHolderClass="com.tcpip147.websupport.css.language.psi.CssTypes"
  elementTypeClass="com.tcpip147.websupport.css.language.psi.CssElementType"
  tokenTypeClass="com.tcpip147.websupport.css.language.psi.CssTokenType"
}

stylesheet ::= ws (charset_ (COMMENT | SPACE | CDO | CDC)*)*
                  ((imports | namespace_ | nestedStatement) (COMMENT | SPACE | CDO | CDC)*)* <<eof>>

charset_ ::= CHARSET ws STRING_ ws ';' ws

imports ::= IMPORT ws (STRING_ | urlWrap) ws mediaQueryList ';' ws
          | IMPORT ws (STRING_ | urlWrap) ws ';' ws

namespace_ ::= NAMESPACE ws (namespacePrefix ws)? (STRING_ | urlWrap) ws ';' ws

namespacePrefix ::= ident_

media_ ::= MEDIA ws mediaQueryList groupRuleBody ws

mediaQueryList ::= (mediaQuery ( COMMA ws mediaQuery)*)? ws

mediaQuery ::= (MEDIA_ONLY | NOT)? ws mediaType ws (AND ws mediaExpression)*
             | mediaExpression ( AND ws mediaExpression)*

mediaType ::= ident_

mediaExpression ::= '(' ws mediaFeature (':' ws expr)? ')' ws

mediaFeature ::= ident_ ws

page_ ::= PAGE ws pseudoPage? '{' ws declaration? (';' ws declaration?)* '}' ws

pseudoPage ::= ':' ident_ ws

selectorGroup ::= selector (COMMA ws selector)*

selector ::= simpleSelectorSequence ws (combinator simpleSelectorSequence ws)*

combinator ::= PLUS ws
    | GREATER ws
    | TILDE ws
    | SPACE ws

simpleSelectorSequence ::= (typeSelector | universal) (HASH | className | attrib | pseudo | negation)*
                         | ( HASH | className | attrib | pseudo | negation)+

typeSelector ::= typeNamespacePrefix? elementName

typeNamespacePrefix ::= (ident_ | '*')? '|'

elementName ::= ident_

universal ::= typeNamespacePrefix? '*'

className ::= '.' ident_

attrib ::= '[' ws typeNamespacePrefix? ident_ ws ((PREFIX_MATCH | SUFFIX_MATCH | SUBSTRING_MATCH | '=' | INCLUDES | DASH_MATCH) ws (ident_ | STRING_) ws)? ('i'|'s')? ws? ']'

pseudo ::= ':' ':'? (ident_ | functionalPseudo)

functionalPseudo ::= FUNCTION_ ws expression ')'

expression ::= (( PLUS | MINUS | DIMENSION | UNKNOWN_DIMENSION | NUMBER | STRING_ | ident_) ws)+

negation ::= PSEUDO_NOT ws negationArg ws ')'

negationArg ::= typeSelector
    | universal
    | HASH
    | className
    | attrib
    | pseudo

operator_ ::= '/' ws
    | COMMA ws
    | SPACE ws
    | '=' ws

property_ ::= ident_ ws
    | VARIABLE ws
    | '*' ident_
    | '_' ident_

ruleset ::= selectorGroup '{' ws declarationList? '}' ws
          | any_* '{' ws declarationList? '}' ws

declarationList ::= (';' ws)* declaration ws (';' ws declaration?)*

declaration ::= property_ ':' ws expr prio?
              | property_ ':' ws value

prio ::= IMPORTANT ws

value ::= (any_ | block | AT_KEYWORD ws)+

expr ::= term (operator_? term)*

term ::= number_ ws
       | percentage_ ws
       | dimension_ ws
       | STRING_ ws
       | UNICODE_RANGE ws
       | ident_ ws
       | var_
       | urlWrap ws
       | hexcolor
       | calc_
       | function
       | unknownDimension_ ws
       | dxImageTransform_

function ::= FUNCTION_ ws expr ')' ws

dxImageTransform_ ::= DX_IMAGE_TRANSFORM ws expr ')' ws

hexcolor ::= HASH ws

number_ ::= (PLUS | MINUS)? NUMBER

percentage_ ::= (PLUS | MINUS)? PERCENTAGE

dimension_ ::= (PLUS | MINUS)? DIMENSION

unknownDimension_ ::= (PLUS | MINUS)? UNKNOWN_DIMENSION

any_ ::= ident_ ws
       | number_ ws
       | percentage_ ws
       | dimension_ ws
       | unknownDimension_ ws
       | STRING_ ws
       | urlWrap ws
       | HASH ws
       | UNICODE_RANGE ws
       | INCLUDES ws
       | DASH_MATCH ws
       | ':' ws
       | FUNCTION_ ws ( any_ | unused)* ')' ws
       | '(' ws ( any_ | unused)* ')' ws
       | '[' ws ( any_ | unused)* ']' ws

atRule ::= AT_KEYWORD ws any_* (block | ';' ws)

unused ::= block
         | AT_KEYWORD ws
         | ';' ws
         | CDO ws
         | CDC ws

block ::= '{' ws (declarationList | nestedStatement | any_ | block | AT_KEYWORD ws | ';' ws)* '}' ws

nestedStatement ::= ruleset
                  | media_
                  | page_
                  | fontFaceRule
                  | keyframesRule
                  | supportsRule
                  | viewport_
                  | counterStyle_
                  | fontFeatureValuesRule
                  | atRule

groupRuleBody ::= '{' ws nestedStatement* '}' ws

supportsRule ::= SUPPORTS ws supportsCondition ws groupRuleBody

supportsCondition ::= supportsNegation
                    | supportsConjunction
                    | supportsDisjunction
                    | supportsConditionInParens

supportsConditionInParens ::= '(' ws supportsCondition ws ')'
                            | supportsDeclarationCondition
                            | generalEnclosed

supportsNegation ::= NOT ws SPACE ws supportsConditionInParens

supportsConjunction ::= supportsConditionInParens (ws SPACE ws AND ws SPACE ws supportsConditionInParens)+

supportsDisjunction ::= supportsConditionInParens (ws SPACE ws OR ws SPACE ws supportsConditionInParens)+

supportsDeclarationCondition ::= '(' ws declaration ')'

generalEnclosed ::= (FUNCTION_ | '(') (any_ | unused)* ')'

urlWrap ::= URL_ ws STRING_ ws ')' | URL

var_ ::= VAR ws VARIABLE ws ')' ws

calc_ ::= CALC ws calcSum ')' ws

calcSum ::= calcProduct (SPACE ws ( PLUS | MINUS) ws SPACE ws calcProduct)*

calcProduct ::= calcValue ('*' ws calcValue | '/' ws number_ ws)*

calcValue ::= number_ ws
            | dimension_ ws
            | unknownDimension_ ws
            | percentage_ ws
            | '(' ws calcSum ')' ws

fontFaceRule ::= FONT_FACE ws '{' ws fontFaceDeclaration? (';' ws fontFaceDeclaration?)* '}' ws

fontFaceDeclaration ::= property_ ':' ws expr
                      | property_ ':' ws value

keyframesRule ::= KEY_FRAMES ws SPACE ws ident_ ws '{' ws keyframeBlock* '}' ws

keyframeBlock ::= (keyframeSelector '{' ws declarationList? '}' ws)

keyframeSelector ::= (FROM | TO | PERCENTAGE) ws (COMMA ws ( FROM | TO | PERCENTAGE) ws)*

viewport_ ::= VIEWPORT ws '{' ws declarationList? '}' ws

counterStyle_ ::= COUNTER_STYLE ws ident_ ws '{' ws declarationList? '}' ws

fontFeatureValuesRule ::= FONT_FEATURE_VALUES ws fontFamilyNameList ws '{' ws featureValueBlock* '}' ws

fontFamilyNameList ::= fontFamilyName (ws COMMA ws fontFamilyName)*

fontFamilyName ::= STRING_ | ident_ ( ws ident_)*

featureValueBlock ::= featureType ws '{' ws featureValueDefinition? (ws ';' ws featureValueDefinition?)* '}' ws

featureType ::= AT_KEYWORD

featureValueDefinition ::= ident_ ws ':' ws number_ (ws number_)*

ident_ ::= IDENT
        | MEDIA_ONLY
        | NOT
        | AND
        | OR
        | FROM
        | TO

ws ::= (COMMENT | SPACE)*
